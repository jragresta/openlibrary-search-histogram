{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { deepMerge, getValue, isObject } from \"../../util/object\";\nimport { copy } from \"../../util/array\";\nimport { Padding } from \"../../util/padding\";\nimport { Chart } from \"../chart\";\nvar palette = {\n  fills: ['#f3622d', '#fba71b', '#57b757', '#41a9c9', '#4258c9', '#9a42c8', '#c84164', '#888888'],\n  strokes: ['#aa4520', '#b07513', '#3d803d', '#2d768d', '#2e3e8d', '#6c2e8c', '#8c2d46', '#5f5f5f']\n};\n\nvar ChartTheme = function () {\n  function ChartTheme(options) {\n    var defaults = this.createChartConfigPerSeries(this.getDefaults());\n\n    if (isObject(options)) {\n      var mergeOptions_1 = {\n        arrayMerge: arrayMerge\n      };\n      options = deepMerge({}, options, mergeOptions_1);\n      var overrides_1 = options.overrides;\n\n      if (overrides_1) {\n        if (isObject(overrides_1.common)) {\n          ChartTheme.seriesTypes.concat(['cartesian', 'polar', 'hierarchy']).forEach(function (seriesType) {\n            defaults[seriesType] = deepMerge(defaults[seriesType], overrides_1.common, mergeOptions_1);\n          });\n        }\n\n        if (overrides_1.cartesian) {\n          defaults.cartesian = deepMerge(defaults.cartesian, overrides_1.cartesian, mergeOptions_1);\n          ChartTheme.cartesianSeriesTypes.forEach(function (seriesType) {\n            defaults[seriesType] = deepMerge(defaults[seriesType], overrides_1.cartesian, mergeOptions_1);\n          });\n        }\n\n        if (overrides_1.polar) {\n          defaults.polar = deepMerge(defaults.polar, overrides_1.polar, mergeOptions_1);\n          ChartTheme.polarSeriesTypes.forEach(function (seriesType) {\n            defaults[seriesType] = deepMerge(defaults[seriesType], overrides_1.polar, mergeOptions_1);\n          });\n        }\n\n        if (overrides_1.hierarchy) {\n          defaults.hierarchy = deepMerge(defaults.hierarchy, overrides_1.hierarchy, mergeOptions_1);\n          ChartTheme.hierarchySeriesTypes.forEach(function (seriesType) {\n            defaults[seriesType] = deepMerge(defaults[seriesType], overrides_1.hierarchy, mergeOptions_1);\n          });\n        }\n\n        ChartTheme.seriesTypes.forEach(function (seriesType) {\n          var _a;\n\n          var chartConfig = overrides_1[seriesType];\n\n          if (chartConfig) {\n            if (chartConfig.series) {\n              chartConfig.series = (_a = {}, _a[seriesType] = chartConfig.series, _a);\n            }\n\n            defaults[seriesType] = deepMerge(defaults[seriesType], chartConfig, mergeOptions_1);\n          }\n        });\n      }\n    }\n\n    this.palette = options && options.palette ? options.palette : this.getPalette();\n    this.config = Object.freeze(defaults);\n  }\n\n  ChartTheme.prototype.getPalette = function () {\n    return palette;\n  };\n\n  ChartTheme.getAxisDefaults = function () {\n    return {\n      top: {},\n      right: {},\n      bottom: {},\n      left: {},\n      thickness: 0,\n      title: {\n        padding: {\n          top: 10,\n          right: 10,\n          bottom: 10,\n          left: 10\n        },\n        text: 'Axis Title',\n        fontStyle: undefined,\n        fontWeight: 'bold',\n        fontSize: 12,\n        fontFamily: this.fontFamily,\n        color: 'rgb(70, 70, 70)'\n      },\n      label: {\n        fontStyle: undefined,\n        fontWeight: undefined,\n        fontSize: 12,\n        fontFamily: this.fontFamily,\n        padding: 5,\n        rotation: 0,\n        color: 'rgb(87, 87, 87)',\n        formatter: undefined\n      },\n      line: {\n        width: 1,\n        color: 'rgb(195, 195, 195)'\n      },\n      tick: {\n        width: 1,\n        size: 6,\n        color: 'rgb(195, 195, 195)',\n        count: 10\n      },\n      gridStyle: [{\n        stroke: 'rgb(219, 219, 219)',\n        lineDash: [4, 2]\n      }]\n    };\n  };\n\n  ChartTheme.getSeriesDefaults = function () {\n    return {\n      tooltip: {\n        enabled: true,\n        renderer: undefined,\n        format: undefined\n      },\n      visible: true,\n      showInLegend: true,\n      cursor: 'default',\n      highlightStyle: {\n        fill: 'yellow',\n        series: {\n          enabled: false,\n          dimOpacity: 0.3\n        }\n      }\n    };\n  };\n\n  ChartTheme.getBarSeriesDefaults = function () {\n    return __assign(__assign({}, this.getSeriesDefaults()), {\n      flipXY: false,\n      fillOpacity: 1,\n      strokeOpacity: 1,\n      xKey: '',\n      xName: '',\n      yKeys: [],\n      yNames: [],\n      grouped: false,\n      normalizedTo: undefined,\n      strokeWidth: 1,\n      lineDash: undefined,\n      lineDashOffset: 0,\n      tooltipRenderer: undefined,\n      label: {\n        enabled: false,\n        fontStyle: undefined,\n        fontWeight: undefined,\n        fontSize: 12,\n        fontFamily: this.fontFamily,\n        color: 'rgb(70, 70, 70)',\n        formatter: undefined,\n        placement: 'inside'\n      },\n      shadow: {\n        enabled: false,\n        color: 'rgba(0, 0, 0, 0.5)',\n        xOffset: 3,\n        yOffset: 3,\n        blur: 5\n      }\n    });\n  };\n\n  ChartTheme.getCartesianSeriesMarkerDefaults = function () {\n    return {\n      enabled: true,\n      shape: 'circle',\n      size: 6,\n      maxSize: 30,\n      strokeWidth: 1,\n      formatter: undefined\n    };\n  };\n\n  ChartTheme.getChartDefaults = function () {\n    return {\n      width: 600,\n      height: 300,\n      autoSize: true,\n      background: {\n        visible: true,\n        fill: 'white'\n      },\n      padding: {\n        top: 20,\n        right: 20,\n        bottom: 20,\n        left: 20\n      },\n      title: {\n        enabled: false,\n        padding: {\n          top: 10,\n          right: 10,\n          bottom: 10,\n          left: 10\n        },\n        text: 'Title',\n        fontStyle: undefined,\n        fontWeight: 'bold',\n        fontSize: 16,\n        fontFamily: this.fontFamily,\n        color: 'rgb(70, 70, 70)'\n      },\n      subtitle: {\n        enabled: false,\n        padding: {\n          top: 10,\n          right: 10,\n          bottom: 10,\n          left: 10\n        },\n        text: 'Subtitle',\n        fontStyle: undefined,\n        fontWeight: undefined,\n        fontSize: 12,\n        fontFamily: this.fontFamily,\n        color: 'rgb(140, 140, 140)'\n      },\n      legend: {\n        enabled: true,\n        position: 'right',\n        spacing: 20,\n        item: {\n          paddingX: 16,\n          paddingY: 8,\n          marker: {\n            shape: undefined,\n            size: 15,\n            strokeWidth: 1,\n            padding: 8\n          },\n          label: {\n            color: 'black',\n            fontStyle: undefined,\n            fontWeight: undefined,\n            fontSize: 12,\n            fontFamily: this.fontFamily,\n            formatter: undefined\n          }\n        }\n      },\n      tooltip: {\n        enabled: true,\n        tracking: true,\n        delay: 0,\n        class: Chart.defaultTooltipClass\n      }\n    };\n  };\n\n  ChartTheme.prototype.createChartConfigPerSeries = function (config) {\n    var typeToAliases = {\n      cartesian: ChartTheme.cartesianSeriesTypes,\n      polar: ChartTheme.polarSeriesTypes\n    };\n\n    var _loop_1 = function _loop_1(type) {\n      typeToAliases[type].forEach(function (alias) {\n        if (!config[alias]) {\n          config[alias] = deepMerge({}, config[type], {\n            arrayMerge: arrayMerge\n          });\n        }\n      });\n    };\n\n    for (var type in typeToAliases) {\n      _loop_1(type);\n    }\n\n    return config;\n  };\n\n  ChartTheme.prototype.getConfig = function (path, defaultValue) {\n    var value = getValue(this.config, path, defaultValue);\n\n    if (Array.isArray(value)) {\n      return deepMerge([], value, {\n        arrayMerge: arrayMerge\n      });\n    }\n\n    if (isObject(value)) {\n      return deepMerge({}, value, {\n        arrayMerge: arrayMerge\n      });\n    }\n\n    return value;\n  };\n  /**\n   * Meant to be overridden in subclasses. For example:\n   * ```\n   *     getDefaults() {\n   *         const subclassDefaults = { ... };\n   *         return this.mergeWithParentDefaults(subclassDefaults);\n   *     }\n   * ```\n   */\n\n\n  ChartTheme.prototype.getDefaults = function () {\n    return deepMerge({}, ChartTheme.defaults, {\n      arrayMerge: arrayMerge\n    });\n  };\n\n  ChartTheme.prototype.mergeWithParentDefaults = function (defaults) {\n    var mergeOptions = {\n      arrayMerge: arrayMerge\n    };\n    var proto = Object.getPrototypeOf(Object.getPrototypeOf(this));\n\n    if (proto === Object.prototype) {\n      var config = deepMerge({}, ChartTheme.defaults, mergeOptions);\n      config = deepMerge(config, defaults, mergeOptions);\n      return config;\n    }\n\n    var parentDefaults = proto.getDefaults();\n    return deepMerge(parentDefaults, defaults, mergeOptions);\n  };\n\n  ChartTheme.prototype.setSeriesColors = function (series, seriesOptions, firstColorIndex) {\n    var palette = this.palette;\n    var colorCount = this.getSeriesColorCount(seriesOptions);\n\n    if (colorCount === Infinity) {\n      series.setColors(palette.fills, palette.strokes);\n    } else {\n      var fills = copy(palette.fills, firstColorIndex, colorCount);\n      var strokes = copy(palette.strokes, firstColorIndex, colorCount);\n      series.setColors(fills, strokes);\n      firstColorIndex += colorCount;\n    }\n\n    return firstColorIndex;\n  };\n  /**\n   * This would typically correspond to the number of dependent variables the series plots.\n   * If the color count is not fixed, for example it's data-dependent with one color per data point,\n   * return Infinity to fetch all unique colors and manage them in the series.\n   */\n\n\n  ChartTheme.prototype.getSeriesColorCount = function (seriesOptions) {\n    var type = seriesOptions.type;\n\n    switch (type) {\n      case 'bar':\n      case 'column':\n      case 'area':\n        return seriesOptions.yKeys ? seriesOptions.yKeys.length : 0;\n\n      case 'pie':\n        return Infinity;\n\n      default:\n        return 1;\n    }\n  };\n\n  ChartTheme.fontFamily = 'Verdana, sans-serif';\n  ChartTheme.cartesianDefaults = __assign(__assign({}, ChartTheme.getChartDefaults()), {\n    axes: {\n      number: __assign({}, ChartTheme.getAxisDefaults()),\n      log: __assign(__assign({}, ChartTheme.getAxisDefaults()), {\n        base: 10\n      }),\n      category: __assign({}, ChartTheme.getAxisDefaults()),\n      groupedCategory: __assign({}, ChartTheme.getAxisDefaults()),\n      time: __assign({}, ChartTheme.getAxisDefaults())\n    },\n    series: {\n      column: __assign(__assign({}, ChartTheme.getBarSeriesDefaults()), {\n        flipXY: false\n      }),\n      bar: __assign(__assign({}, ChartTheme.getBarSeriesDefaults()), {\n        flipXY: true\n      }),\n      line: __assign(__assign({}, ChartTheme.getSeriesDefaults()), {\n        title: undefined,\n        xKey: '',\n        xName: '',\n        yKey: '',\n        yName: '',\n        strokeWidth: 2,\n        strokeOpacity: 1,\n        lineDash: undefined,\n        lineDashOffset: 0,\n        tooltipRenderer: undefined,\n        marker: __assign({}, ChartTheme.getCartesianSeriesMarkerDefaults()),\n        label: {\n          enabled: false,\n          fontStyle: undefined,\n          fontWeight: undefined,\n          fontSize: 12,\n          fontFamily: ChartTheme.fontFamily,\n          color: 'rgb(70, 70, 70)',\n          formatter: undefined\n        }\n      }),\n      scatter: __assign(__assign({}, ChartTheme.getSeriesDefaults()), {\n        title: undefined,\n        xKey: '',\n        yKey: '',\n        sizeKey: undefined,\n        labelKey: undefined,\n        xName: '',\n        yName: '',\n        sizeName: 'Size',\n        labelName: 'Label',\n        strokeWidth: 2,\n        fillOpacity: 1,\n        strokeOpacity: 1,\n        tooltipRenderer: undefined,\n        marker: __assign({}, ChartTheme.getCartesianSeriesMarkerDefaults()),\n        label: {\n          enabled: false,\n          fontStyle: undefined,\n          fontWeight: undefined,\n          fontSize: 12,\n          fontFamily: ChartTheme.fontFamily,\n          color: 'rgb(70, 70, 70)'\n        }\n      }),\n      area: __assign(__assign({}, ChartTheme.getSeriesDefaults()), {\n        title: undefined,\n        xKey: '',\n        xName: '',\n        yKeys: [],\n        yNames: [],\n        normalizedTo: undefined,\n        fillOpacity: 0.8,\n        strokeOpacity: 1,\n        strokeWidth: 2,\n        lineDash: undefined,\n        lineDashOffset: 0,\n        shadow: {\n          enabled: false,\n          color: 'rgba(0, 0, 0, 0.5)',\n          xOffset: 3,\n          yOffset: 3,\n          blur: 5\n        },\n        tooltipRenderer: undefined,\n        marker: __assign(__assign({}, ChartTheme.getCartesianSeriesMarkerDefaults()), {\n          enabled: false\n        }),\n        label: {\n          enabled: false,\n          fontStyle: undefined,\n          fontWeight: undefined,\n          fontSize: 12,\n          fontFamily: ChartTheme.fontFamily,\n          color: 'rgb(70, 70, 70)',\n          formatter: undefined\n        }\n      }),\n      histogram: __assign(__assign({}, ChartTheme.getSeriesDefaults()), {\n        title: undefined,\n        xKey: '',\n        yKey: '',\n        xName: '',\n        yName: '',\n        strokeWidth: 1,\n        fillOpacity: 1,\n        strokeOpacity: 1,\n        lineDash: undefined,\n        lineDashOffset: 0,\n        areaPlot: false,\n        binCount: 10,\n        bins: undefined,\n        aggregation: 'sum',\n        tooltipRenderer: undefined,\n        label: {\n          enabled: false,\n          fontStyle: undefined,\n          fontWeight: undefined,\n          fontSize: 12,\n          fontFamily: ChartTheme.fontFamily,\n          color: 'rgb(70, 70, 70)',\n          formatter: undefined\n        }\n      })\n    },\n    navigator: {\n      enabled: false,\n      height: 30,\n      min: 0,\n      max: 1,\n      mask: {\n        fill: '#999999',\n        stroke: '#999999',\n        strokeWidth: 1,\n        fillOpacity: 0.2\n      },\n      minHandle: {\n        fill: '#f2f2f2',\n        stroke: '#999999',\n        strokeWidth: 1,\n        width: 8,\n        height: 16,\n        gripLineGap: 2,\n        gripLineLength: 8\n      },\n      maxHandle: {\n        fill: '#f2f2f2',\n        stroke: '#999999',\n        strokeWidth: 1,\n        width: 8,\n        height: 16,\n        gripLineGap: 2,\n        gripLineLength: 8\n      }\n    }\n  });\n  ChartTheme.defaults = {\n    cartesian: ChartTheme.cartesianDefaults,\n    groupedCategory: ChartTheme.cartesianDefaults,\n    polar: __assign(__assign({}, ChartTheme.getChartDefaults()), {\n      series: {\n        pie: __assign(__assign({}, ChartTheme.getSeriesDefaults()), {\n          title: {\n            enabled: true,\n            showInLegend: false,\n            padding: new Padding(0),\n            text: '',\n            fontStyle: undefined,\n            fontWeight: undefined,\n            fontSize: 12,\n            fontFamily: ChartTheme.fontFamily,\n            color: 'rgb(70, 70, 70)'\n          },\n          angleKey: '',\n          angleName: '',\n          radiusKey: undefined,\n          radiusName: undefined,\n          labelKey: undefined,\n          labelName: undefined,\n          label: {\n            enabled: true,\n            fontStyle: undefined,\n            fontWeight: undefined,\n            fontSize: 12,\n            fontFamily: ChartTheme.fontFamily,\n            color: 'rgb(70, 70, 70)',\n            offset: 3,\n            minAngle: 20\n          },\n          callout: {\n            length: 10,\n            strokeWidth: 2\n          },\n          fillOpacity: 1,\n          strokeOpacity: 1,\n          strokeWidth: 1,\n          lineDash: undefined,\n          lineDashOffset: 0,\n          rotation: 0,\n          outerRadiusOffset: 0,\n          innerRadiusOffset: 0,\n          shadow: {\n            enabled: false,\n            color: 'rgba(0, 0, 0, 0.5)',\n            xOffset: 3,\n            yOffset: 3,\n            blur: 5\n          }\n        })\n      }\n    }),\n    hierarchy: __assign(__assign({}, ChartTheme.getChartDefaults()), {\n      series: {\n        treemap: __assign(__assign({}, ChartTheme.getSeriesDefaults()), {\n          showInLegend: false,\n          labelKey: 'label',\n          sizeKey: 'size',\n          colorKey: 'color',\n          colorDomain: [-5, 5],\n          colorRange: ['#cb4b3f', '#6acb64'],\n          colorParents: false,\n          gradient: true,\n          nodePadding: 2,\n          title: {\n            enabled: true,\n            color: 'white',\n            fontStyle: undefined,\n            fontWeight: 'bold',\n            fontSize: 12,\n            fontFamily: 'Verdana, sans-serif',\n            padding: 15\n          },\n          subtitle: {\n            enabled: true,\n            color: 'white',\n            fontStyle: undefined,\n            fontWeight: undefined,\n            fontSize: 9,\n            fontFamily: 'Verdana, sans-serif',\n            padding: 13\n          },\n          labels: {\n            large: {\n              enabled: true,\n              fontStyle: undefined,\n              fontWeight: 'bold',\n              fontSize: 18,\n              fontFamily: 'Verdana, sans-serif',\n              color: 'white'\n            },\n            medium: {\n              enabled: true,\n              fontStyle: undefined,\n              fontWeight: 'bold',\n              fontSize: 14,\n              fontFamily: 'Verdana, sans-serif',\n              color: 'white'\n            },\n            small: {\n              enabled: true,\n              fontStyle: undefined,\n              fontWeight: 'bold',\n              fontSize: 10,\n              fontFamily: 'Verdana, sans-serif',\n              color: 'white'\n            },\n            color: {\n              enabled: true,\n              fontStyle: undefined,\n              fontWeight: undefined,\n              fontSize: 12,\n              fontFamily: 'Verdana, sans-serif',\n              color: 'white'\n            }\n          }\n        })\n      }\n    })\n  };\n  ChartTheme.cartesianSeriesTypes = ['line', 'area', 'bar', 'column', 'scatter', 'histogram'];\n  ChartTheme.polarSeriesTypes = ['pie'];\n  ChartTheme.hierarchySeriesTypes = ['treemap'];\n  ChartTheme.seriesTypes = ChartTheme.cartesianSeriesTypes.concat(ChartTheme.polarSeriesTypes);\n  return ChartTheme;\n}();\n\nexport { ChartTheme };\n\nfunction arrayMerge(target, source, options) {\n  return source;\n}","map":{"version":3,"sources":["/Users/julianneagresta/Projects/openlibrary-search-histogram/node_modules/ag-charts-community/dist/es6/chart/themes/chartTheme.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","deepMerge","getValue","isObject","copy","Padding","Chart","palette","fills","strokes","ChartTheme","options","defaults","createChartConfigPerSeries","getDefaults","mergeOptions_1","arrayMerge","overrides_1","overrides","common","seriesTypes","concat","forEach","seriesType","cartesian","cartesianSeriesTypes","polar","polarSeriesTypes","hierarchy","hierarchySeriesTypes","_a","chartConfig","series","getPalette","config","freeze","getAxisDefaults","top","right","bottom","left","thickness","title","padding","text","fontStyle","undefined","fontWeight","fontSize","fontFamily","color","label","rotation","formatter","line","width","tick","size","count","gridStyle","stroke","lineDash","getSeriesDefaults","tooltip","enabled","renderer","format","visible","showInLegend","cursor","highlightStyle","fill","dimOpacity","getBarSeriesDefaults","flipXY","fillOpacity","strokeOpacity","xKey","xName","yKeys","yNames","grouped","normalizedTo","strokeWidth","lineDashOffset","tooltipRenderer","placement","shadow","xOffset","yOffset","blur","getCartesianSeriesMarkerDefaults","shape","maxSize","getChartDefaults","height","autoSize","background","subtitle","legend","position","spacing","item","paddingX","paddingY","marker","tracking","delay","class","defaultTooltipClass","typeToAliases","_loop_1","type","alias","getConfig","path","defaultValue","value","Array","isArray","mergeWithParentDefaults","mergeOptions","proto","getPrototypeOf","parentDefaults","setSeriesColors","seriesOptions","firstColorIndex","colorCount","getSeriesColorCount","Infinity","setColors","cartesianDefaults","axes","number","log","base","category","groupedCategory","time","column","bar","yKey","yName","scatter","sizeKey","labelKey","sizeName","labelName","area","histogram","areaPlot","binCount","bins","aggregation","navigator","min","max","mask","minHandle","gripLineGap","gripLineLength","maxHandle","pie","angleKey","angleName","radiusKey","radiusName","offset","minAngle","callout","outerRadiusOffset","innerRadiusOffset","treemap","colorKey","colorDomain","colorRange","colorParents","gradient","nodePadding","labels","large","medium","small","target","source"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { deepMerge, getValue, isObject } from \"../../util/object\";\nimport { copy } from \"../../util/array\";\nimport { Padding } from \"../../util/padding\";\nimport { Chart } from \"../chart\";\nvar palette = {\n    fills: [\n        '#f3622d',\n        '#fba71b',\n        '#57b757',\n        '#41a9c9',\n        '#4258c9',\n        '#9a42c8',\n        '#c84164',\n        '#888888'\n    ],\n    strokes: [\n        '#aa4520',\n        '#b07513',\n        '#3d803d',\n        '#2d768d',\n        '#2e3e8d',\n        '#6c2e8c',\n        '#8c2d46',\n        '#5f5f5f'\n    ]\n};\nvar ChartTheme = /** @class */ (function () {\n    function ChartTheme(options) {\n        var defaults = this.createChartConfigPerSeries(this.getDefaults());\n        if (isObject(options)) {\n            var mergeOptions_1 = { arrayMerge: arrayMerge };\n            options = deepMerge({}, options, mergeOptions_1);\n            var overrides_1 = options.overrides;\n            if (overrides_1) {\n                if (isObject(overrides_1.common)) {\n                    ChartTheme.seriesTypes.concat(['cartesian', 'polar', 'hierarchy']).forEach(function (seriesType) {\n                        defaults[seriesType] = deepMerge(defaults[seriesType], overrides_1.common, mergeOptions_1);\n                    });\n                }\n                if (overrides_1.cartesian) {\n                    defaults.cartesian = deepMerge(defaults.cartesian, overrides_1.cartesian, mergeOptions_1);\n                    ChartTheme.cartesianSeriesTypes.forEach(function (seriesType) {\n                        defaults[seriesType] = deepMerge(defaults[seriesType], overrides_1.cartesian, mergeOptions_1);\n                    });\n                }\n                if (overrides_1.polar) {\n                    defaults.polar = deepMerge(defaults.polar, overrides_1.polar, mergeOptions_1);\n                    ChartTheme.polarSeriesTypes.forEach(function (seriesType) {\n                        defaults[seriesType] = deepMerge(defaults[seriesType], overrides_1.polar, mergeOptions_1);\n                    });\n                }\n                if (overrides_1.hierarchy) {\n                    defaults.hierarchy = deepMerge(defaults.hierarchy, overrides_1.hierarchy, mergeOptions_1);\n                    ChartTheme.hierarchySeriesTypes.forEach(function (seriesType) {\n                        defaults[seriesType] = deepMerge(defaults[seriesType], overrides_1.hierarchy, mergeOptions_1);\n                    });\n                }\n                ChartTheme.seriesTypes.forEach(function (seriesType) {\n                    var _a;\n                    var chartConfig = overrides_1[seriesType];\n                    if (chartConfig) {\n                        if (chartConfig.series) {\n                            chartConfig.series = (_a = {}, _a[seriesType] = chartConfig.series, _a);\n                        }\n                        defaults[seriesType] = deepMerge(defaults[seriesType], chartConfig, mergeOptions_1);\n                    }\n                });\n            }\n        }\n        this.palette = options && options.palette ? options.palette : this.getPalette();\n        this.config = Object.freeze(defaults);\n    }\n    ChartTheme.prototype.getPalette = function () {\n        return palette;\n    };\n    ChartTheme.getAxisDefaults = function () {\n        return {\n            top: {},\n            right: {},\n            bottom: {},\n            left: {},\n            thickness: 0,\n            title: {\n                padding: {\n                    top: 10,\n                    right: 10,\n                    bottom: 10,\n                    left: 10\n                },\n                text: 'Axis Title',\n                fontStyle: undefined,\n                fontWeight: 'bold',\n                fontSize: 12,\n                fontFamily: this.fontFamily,\n                color: 'rgb(70, 70, 70)'\n            },\n            label: {\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: this.fontFamily,\n                padding: 5,\n                rotation: 0,\n                color: 'rgb(87, 87, 87)',\n                formatter: undefined\n            },\n            line: {\n                width: 1,\n                color: 'rgb(195, 195, 195)'\n            },\n            tick: {\n                width: 1,\n                size: 6,\n                color: 'rgb(195, 195, 195)',\n                count: 10\n            },\n            gridStyle: [{\n                    stroke: 'rgb(219, 219, 219)',\n                    lineDash: [4, 2]\n                }]\n        };\n    };\n    ChartTheme.getSeriesDefaults = function () {\n        return {\n            tooltip: {\n                enabled: true,\n                renderer: undefined,\n                format: undefined\n            },\n            visible: true,\n            showInLegend: true,\n            cursor: 'default',\n            highlightStyle: {\n                fill: 'yellow',\n                series: {\n                    enabled: false,\n                    dimOpacity: 0.3\n                }\n            }\n        };\n    };\n    ChartTheme.getBarSeriesDefaults = function () {\n        return __assign(__assign({}, this.getSeriesDefaults()), { flipXY: false, fillOpacity: 1, strokeOpacity: 1, xKey: '', xName: '', yKeys: [], yNames: [], grouped: false, normalizedTo: undefined, strokeWidth: 1, lineDash: undefined, lineDashOffset: 0, tooltipRenderer: undefined, label: {\n                enabled: false,\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: this.fontFamily,\n                color: 'rgb(70, 70, 70)',\n                formatter: undefined,\n                placement: 'inside'\n            }, shadow: {\n                enabled: false,\n                color: 'rgba(0, 0, 0, 0.5)',\n                xOffset: 3,\n                yOffset: 3,\n                blur: 5\n            } });\n    };\n    ChartTheme.getCartesianSeriesMarkerDefaults = function () {\n        return {\n            enabled: true,\n            shape: 'circle',\n            size: 6,\n            maxSize: 30,\n            strokeWidth: 1,\n            formatter: undefined\n        };\n    };\n    ChartTheme.getChartDefaults = function () {\n        return {\n            width: 600,\n            height: 300,\n            autoSize: true,\n            background: {\n                visible: true,\n                fill: 'white'\n            },\n            padding: {\n                top: 20,\n                right: 20,\n                bottom: 20,\n                left: 20\n            },\n            title: {\n                enabled: false,\n                padding: {\n                    top: 10,\n                    right: 10,\n                    bottom: 10,\n                    left: 10\n                },\n                text: 'Title',\n                fontStyle: undefined,\n                fontWeight: 'bold',\n                fontSize: 16,\n                fontFamily: this.fontFamily,\n                color: 'rgb(70, 70, 70)'\n            },\n            subtitle: {\n                enabled: false,\n                padding: {\n                    top: 10,\n                    right: 10,\n                    bottom: 10,\n                    left: 10\n                },\n                text: 'Subtitle',\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: this.fontFamily,\n                color: 'rgb(140, 140, 140)'\n            },\n            legend: {\n                enabled: true,\n                position: 'right',\n                spacing: 20,\n                item: {\n                    paddingX: 16,\n                    paddingY: 8,\n                    marker: {\n                        shape: undefined,\n                        size: 15,\n                        strokeWidth: 1,\n                        padding: 8\n                    },\n                    label: {\n                        color: 'black',\n                        fontStyle: undefined,\n                        fontWeight: undefined,\n                        fontSize: 12,\n                        fontFamily: this.fontFamily,\n                        formatter: undefined\n                    }\n                }\n            },\n            tooltip: {\n                enabled: true,\n                tracking: true,\n                delay: 0,\n                class: Chart.defaultTooltipClass\n            }\n        };\n    };\n    ChartTheme.prototype.createChartConfigPerSeries = function (config) {\n        var typeToAliases = {\n            cartesian: ChartTheme.cartesianSeriesTypes,\n            polar: ChartTheme.polarSeriesTypes\n        };\n        var _loop_1 = function (type) {\n            typeToAliases[type].forEach(function (alias) {\n                if (!config[alias]) {\n                    config[alias] = deepMerge({}, config[type], { arrayMerge: arrayMerge });\n                }\n            });\n        };\n        for (var type in typeToAliases) {\n            _loop_1(type);\n        }\n        return config;\n    };\n    ChartTheme.prototype.getConfig = function (path, defaultValue) {\n        var value = getValue(this.config, path, defaultValue);\n        if (Array.isArray(value)) {\n            return deepMerge([], value, { arrayMerge: arrayMerge });\n        }\n        if (isObject(value)) {\n            return deepMerge({}, value, { arrayMerge: arrayMerge });\n        }\n        return value;\n    };\n    /**\n     * Meant to be overridden in subclasses. For example:\n     * ```\n     *     getDefaults() {\n     *         const subclassDefaults = { ... };\n     *         return this.mergeWithParentDefaults(subclassDefaults);\n     *     }\n     * ```\n     */\n    ChartTheme.prototype.getDefaults = function () {\n        return deepMerge({}, ChartTheme.defaults, { arrayMerge: arrayMerge });\n    };\n    ChartTheme.prototype.mergeWithParentDefaults = function (defaults) {\n        var mergeOptions = { arrayMerge: arrayMerge };\n        var proto = Object.getPrototypeOf(Object.getPrototypeOf(this));\n        if (proto === Object.prototype) {\n            var config = deepMerge({}, ChartTheme.defaults, mergeOptions);\n            config = deepMerge(config, defaults, mergeOptions);\n            return config;\n        }\n        var parentDefaults = proto.getDefaults();\n        return deepMerge(parentDefaults, defaults, mergeOptions);\n    };\n    ChartTheme.prototype.setSeriesColors = function (series, seriesOptions, firstColorIndex) {\n        var palette = this.palette;\n        var colorCount = this.getSeriesColorCount(seriesOptions);\n        if (colorCount === Infinity) {\n            series.setColors(palette.fills, palette.strokes);\n        }\n        else {\n            var fills = copy(palette.fills, firstColorIndex, colorCount);\n            var strokes = copy(palette.strokes, firstColorIndex, colorCount);\n            series.setColors(fills, strokes);\n            firstColorIndex += colorCount;\n        }\n        return firstColorIndex;\n    };\n    /**\n     * This would typically correspond to the number of dependent variables the series plots.\n     * If the color count is not fixed, for example it's data-dependent with one color per data point,\n     * return Infinity to fetch all unique colors and manage them in the series.\n     */\n    ChartTheme.prototype.getSeriesColorCount = function (seriesOptions) {\n        var type = seriesOptions.type;\n        switch (type) {\n            case 'bar':\n            case 'column':\n            case 'area':\n                return seriesOptions.yKeys ? seriesOptions.yKeys.length : 0;\n            case 'pie':\n                return Infinity;\n            default:\n                return 1;\n        }\n    };\n    ChartTheme.fontFamily = 'Verdana, sans-serif';\n    ChartTheme.cartesianDefaults = __assign(__assign({}, ChartTheme.getChartDefaults()), { axes: {\n            number: __assign({}, ChartTheme.getAxisDefaults()),\n            log: __assign(__assign({}, ChartTheme.getAxisDefaults()), { base: 10 }),\n            category: __assign({}, ChartTheme.getAxisDefaults()),\n            groupedCategory: __assign({}, ChartTheme.getAxisDefaults()),\n            time: __assign({}, ChartTheme.getAxisDefaults())\n        }, series: {\n            column: __assign(__assign({}, ChartTheme.getBarSeriesDefaults()), { flipXY: false }),\n            bar: __assign(__assign({}, ChartTheme.getBarSeriesDefaults()), { flipXY: true }),\n            line: __assign(__assign({}, ChartTheme.getSeriesDefaults()), { title: undefined, xKey: '', xName: '', yKey: '', yName: '', strokeWidth: 2, strokeOpacity: 1, lineDash: undefined, lineDashOffset: 0, tooltipRenderer: undefined, marker: __assign({}, ChartTheme.getCartesianSeriesMarkerDefaults()), label: {\n                    enabled: false,\n                    fontStyle: undefined,\n                    fontWeight: undefined,\n                    fontSize: 12,\n                    fontFamily: ChartTheme.fontFamily,\n                    color: 'rgb(70, 70, 70)',\n                    formatter: undefined\n                } }),\n            scatter: __assign(__assign({}, ChartTheme.getSeriesDefaults()), { title: undefined, xKey: '', yKey: '', sizeKey: undefined, labelKey: undefined, xName: '', yName: '', sizeName: 'Size', labelName: 'Label', strokeWidth: 2, fillOpacity: 1, strokeOpacity: 1, tooltipRenderer: undefined, marker: __assign({}, ChartTheme.getCartesianSeriesMarkerDefaults()), label: {\n                    enabled: false,\n                    fontStyle: undefined,\n                    fontWeight: undefined,\n                    fontSize: 12,\n                    fontFamily: ChartTheme.fontFamily,\n                    color: 'rgb(70, 70, 70)'\n                } }),\n            area: __assign(__assign({}, ChartTheme.getSeriesDefaults()), { title: undefined, xKey: '', xName: '', yKeys: [], yNames: [], normalizedTo: undefined, fillOpacity: 0.8, strokeOpacity: 1, strokeWidth: 2, lineDash: undefined, lineDashOffset: 0, shadow: {\n                    enabled: false,\n                    color: 'rgba(0, 0, 0, 0.5)',\n                    xOffset: 3,\n                    yOffset: 3,\n                    blur: 5\n                }, tooltipRenderer: undefined, marker: __assign(__assign({}, ChartTheme.getCartesianSeriesMarkerDefaults()), { enabled: false }), label: {\n                    enabled: false,\n                    fontStyle: undefined,\n                    fontWeight: undefined,\n                    fontSize: 12,\n                    fontFamily: ChartTheme.fontFamily,\n                    color: 'rgb(70, 70, 70)',\n                    formatter: undefined\n                } }),\n            histogram: __assign(__assign({}, ChartTheme.getSeriesDefaults()), { title: undefined, xKey: '', yKey: '', xName: '', yName: '', strokeWidth: 1, fillOpacity: 1, strokeOpacity: 1, lineDash: undefined, lineDashOffset: 0, areaPlot: false, binCount: 10, bins: undefined, aggregation: 'sum', tooltipRenderer: undefined, label: {\n                    enabled: false,\n                    fontStyle: undefined,\n                    fontWeight: undefined,\n                    fontSize: 12,\n                    fontFamily: ChartTheme.fontFamily,\n                    color: 'rgb(70, 70, 70)',\n                    formatter: undefined\n                } })\n        }, navigator: {\n            enabled: false,\n            height: 30,\n            min: 0,\n            max: 1,\n            mask: {\n                fill: '#999999',\n                stroke: '#999999',\n                strokeWidth: 1,\n                fillOpacity: 0.2\n            },\n            minHandle: {\n                fill: '#f2f2f2',\n                stroke: '#999999',\n                strokeWidth: 1,\n                width: 8,\n                height: 16,\n                gripLineGap: 2,\n                gripLineLength: 8\n            },\n            maxHandle: {\n                fill: '#f2f2f2',\n                stroke: '#999999',\n                strokeWidth: 1,\n                width: 8,\n                height: 16,\n                gripLineGap: 2,\n                gripLineLength: 8\n            }\n        } });\n    ChartTheme.defaults = {\n        cartesian: ChartTheme.cartesianDefaults,\n        groupedCategory: ChartTheme.cartesianDefaults,\n        polar: __assign(__assign({}, ChartTheme.getChartDefaults()), { series: {\n                pie: __assign(__assign({}, ChartTheme.getSeriesDefaults()), { title: {\n                        enabled: true,\n                        showInLegend: false,\n                        padding: new Padding(0),\n                        text: '',\n                        fontStyle: undefined,\n                        fontWeight: undefined,\n                        fontSize: 12,\n                        fontFamily: ChartTheme.fontFamily,\n                        color: 'rgb(70, 70, 70)'\n                    }, angleKey: '', angleName: '', radiusKey: undefined, radiusName: undefined, labelKey: undefined, labelName: undefined, label: {\n                        enabled: true,\n                        fontStyle: undefined,\n                        fontWeight: undefined,\n                        fontSize: 12,\n                        fontFamily: ChartTheme.fontFamily,\n                        color: 'rgb(70, 70, 70)',\n                        offset: 3,\n                        minAngle: 20\n                    }, callout: {\n                        length: 10,\n                        strokeWidth: 2\n                    }, fillOpacity: 1, strokeOpacity: 1, strokeWidth: 1, lineDash: undefined, lineDashOffset: 0, rotation: 0, outerRadiusOffset: 0, innerRadiusOffset: 0, shadow: {\n                        enabled: false,\n                        color: 'rgba(0, 0, 0, 0.5)',\n                        xOffset: 3,\n                        yOffset: 3,\n                        blur: 5\n                    } })\n            } }),\n        hierarchy: __assign(__assign({}, ChartTheme.getChartDefaults()), { series: {\n                treemap: __assign(__assign({}, ChartTheme.getSeriesDefaults()), { showInLegend: false, labelKey: 'label', sizeKey: 'size', colorKey: 'color', colorDomain: [-5, 5], colorRange: ['#cb4b3f', '#6acb64'], colorParents: false, gradient: true, nodePadding: 2, title: {\n                        enabled: true,\n                        color: 'white',\n                        fontStyle: undefined,\n                        fontWeight: 'bold',\n                        fontSize: 12,\n                        fontFamily: 'Verdana, sans-serif',\n                        padding: 15\n                    }, subtitle: {\n                        enabled: true,\n                        color: 'white',\n                        fontStyle: undefined,\n                        fontWeight: undefined,\n                        fontSize: 9,\n                        fontFamily: 'Verdana, sans-serif',\n                        padding: 13\n                    }, labels: {\n                        large: {\n                            enabled: true,\n                            fontStyle: undefined,\n                            fontWeight: 'bold',\n                            fontSize: 18,\n                            fontFamily: 'Verdana, sans-serif',\n                            color: 'white'\n                        },\n                        medium: {\n                            enabled: true,\n                            fontStyle: undefined,\n                            fontWeight: 'bold',\n                            fontSize: 14,\n                            fontFamily: 'Verdana, sans-serif',\n                            color: 'white'\n                        },\n                        small: {\n                            enabled: true,\n                            fontStyle: undefined,\n                            fontWeight: 'bold',\n                            fontSize: 10,\n                            fontFamily: 'Verdana, sans-serif',\n                            color: 'white'\n                        },\n                        color: {\n                            enabled: true,\n                            fontStyle: undefined,\n                            fontWeight: undefined,\n                            fontSize: 12,\n                            fontFamily: 'Verdana, sans-serif',\n                            color: 'white'\n                        }\n                    } })\n            } })\n    };\n    ChartTheme.cartesianSeriesTypes = ['line', 'area', 'bar', 'column', 'scatter', 'histogram'];\n    ChartTheme.polarSeriesTypes = ['pie'];\n    ChartTheme.hierarchySeriesTypes = ['treemap'];\n    ChartTheme.seriesTypes = ChartTheme.cartesianSeriesTypes.concat(ChartTheme.polarSeriesTypes);\n    return ChartTheme;\n}());\nexport { ChartTheme };\nfunction arrayMerge(target, source, options) {\n    return source;\n}\n"]},"metadata":{},"sourceType":"module"}