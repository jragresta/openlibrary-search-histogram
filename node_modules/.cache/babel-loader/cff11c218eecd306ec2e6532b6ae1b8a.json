{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar _a, _b, _c, _d, _e;\n\nimport { Padding } from \"../util/padding\";\nimport { CartesianChart } from \"./cartesianChart\";\nimport { GroupedCategoryChart } from \"./groupedCategoryChart\";\nimport { NumberAxis } from \"./axis/numberAxis\";\nimport { CategoryAxis } from \"./axis/categoryAxis\";\nimport { GroupedCategoryAxis } from \"./axis/groupedCategoryAxis\";\nimport { LineSeries } from \"./series/cartesian/lineSeries\";\nimport { BarSeries } from \"./series/cartesian/barSeries\";\nimport { HistogramSeries } from \"./series/cartesian/histogramSeries\";\nimport { ScatterSeries } from \"./series/cartesian/scatterSeries\";\nimport { AreaSeries } from \"./series/cartesian/areaSeries\";\nimport { PolarChart } from \"./polarChart\";\nimport { PieSeries, PieTitle } from \"./series/polar/pieSeries\";\nimport { AxisLabel, AxisTick } from \"../axis\";\nimport { TimeAxis } from \"./axis/timeAxis\";\nimport { Caption } from \"../caption\";\nimport { DropShadow } from \"../scene/dropShadow\";\nimport { Legend, LegendPosition, LegendItem, LegendMarker, LegendLabel } from \"./legend\";\nimport { Navigator } from \"./navigator/navigator\";\nimport { NavigatorMask } from \"./navigator/navigatorMask\";\nimport { NavigatorHandle } from \"./navigator/navigatorHandle\";\nimport { CartesianSeriesMarker } from \"./series/cartesian/cartesianSeries\";\nimport { Chart } from \"./chart\";\nimport { HierarchyChart } from \"./hierarchyChart\";\nimport { TreemapSeries } from \"./series/hierarchy/treemapSeries\";\nimport { LogAxis } from \"./axis/logAxis\";\nimport { Label } from \"./label\";\n/*\n    This file defines the specs for creating different kinds of charts, but\n    contains no code that uses the specs to actually create charts\n*/\n\nvar chartPadding = 20;\nvar commonChartMappings = {\n  background: {\n    meta: {\n      defaults: {\n        visible: true,\n        fill: 'white'\n      }\n    }\n  },\n  padding: {\n    meta: {\n      constructor: Padding,\n      defaults: {\n        top: chartPadding,\n        right: chartPadding,\n        bottom: chartPadding,\n        left: chartPadding\n      }\n    }\n  },\n  tooltip: {\n    meta: {\n      defaults: {\n        enabled: true,\n        tracking: true,\n        delay: 0,\n        class: Chart.defaultTooltipClass\n      }\n    }\n  },\n  title: {\n    meta: {\n      constructor: Caption,\n      defaults: {\n        enabled: false,\n        padding: {\n          meta: {\n            constructor: Padding,\n            defaults: {\n              top: 10,\n              right: 10,\n              bottom: 10,\n              left: 10\n            }\n          }\n        },\n        text: 'Title',\n        fontStyle: undefined,\n        fontWeight: 'bold',\n        fontSize: 14,\n        fontFamily: 'Verdana, sans-serif',\n        color: 'rgb(70, 70, 70)'\n      }\n    }\n  },\n  subtitle: {\n    meta: {\n      constructor: Caption,\n      defaults: {\n        enabled: false,\n        padding: {\n          meta: {\n            constructor: Padding,\n            defaults: {\n              top: 10,\n              right: 10,\n              bottom: 10,\n              left: 10\n            }\n          }\n        },\n        text: 'Subtitle',\n        fontStyle: undefined,\n        fontWeight: undefined,\n        fontSize: 12,\n        fontFamily: 'Verdana, sans-serif',\n        color: 'rgb(140, 140, 140)'\n      }\n    }\n  },\n  legend: {\n    meta: {\n      constructor: Legend,\n      defaults: {\n        enabled: true,\n        position: LegendPosition.Right,\n        spacing: 20\n      }\n    },\n    item: {\n      meta: {\n        constructor: LegendItem,\n        defaults: {\n          paddingX: 16,\n          paddingY: 8\n        }\n      },\n      marker: {\n        meta: {\n          constructor: LegendMarker,\n          defaults: {\n            shape: undefined,\n            size: 15,\n            strokeWidth: 1,\n            padding: 8\n          }\n        }\n      },\n      label: {\n        meta: {\n          constructor: LegendLabel,\n          defaults: {\n            color: 'black',\n            fontStyle: undefined,\n            fontWeight: undefined,\n            fontSize: 12,\n            fontFamily: 'Verdana, sans-serif',\n            formatter: undefined\n          }\n        }\n      }\n    }\n  }\n};\nvar chartDefaults = {\n  container: undefined,\n  autoSize: true,\n  width: 600,\n  height: 300,\n  data: [],\n  title: undefined,\n  subtitle: undefined,\n  padding: {},\n  background: {},\n  legend: {\n    item: {\n      marker: {},\n      label: {}\n    }\n  },\n  navigator: {\n    mask: {},\n    minHandle: {},\n    maxHandle: {}\n  },\n  listeners: undefined\n};\nvar chartMeta = {\n  // Charts components' constructors normally don't take any parameters (which makes things consistent -- everything\n  // is configured the same way, via the properties, and makes the factory pattern work well) but the charts\n  // themselves are the exceptions.\n  // If a chart config has the (optional) `document` property, it will be passed to the constructor.\n  // There is no actual `document` property on the chart, it can only be supplied during instantiation.\n  constructorParams: ['document'],\n  setAsIs: ['container', 'data', 'tooltipOffset'],\n  nonSerializable: ['container', 'data']\n};\nvar axisDefaults = {\n  defaults: {\n    visibleRange: [0, 1],\n    thickness: 0,\n    label: {},\n    tick: {},\n    title: {},\n    line: {},\n    gridStyle: [{\n      stroke: 'rgb(219, 219, 219)',\n      lineDash: [4, 2]\n    }]\n  }\n};\nvar seriesDefaults = {\n  visible: true,\n  showInLegend: true,\n  cursor: 'default',\n  listeners: undefined\n};\nvar highlightStyleDefaults = {\n  highlightStyle: {\n    fill: 'yellow',\n    series: {\n      enabled: false,\n      dimOpacity: 0.3\n    }\n  }\n};\n\nvar columnSeriesDefaults = __assign({\n  fillOpacity: 1,\n  strokeOpacity: 1,\n  xKey: '',\n  xName: '',\n  yKeys: [],\n  yNames: {},\n  grouped: false,\n  normalizedTo: undefined,\n  strokeWidth: 1,\n  lineDash: undefined,\n  lineDashOffset: 0,\n  shadow: undefined\n}, highlightStyleDefaults);\n\nvar shadowMapping = {\n  shadow: {\n    meta: {\n      constructor: DropShadow,\n      defaults: {\n        enabled: true,\n        color: 'rgba(0, 0, 0, 0.5)',\n        xOffset: 0,\n        yOffset: 0,\n        blur: 5\n      }\n    }\n  }\n};\nvar labelDefaults = {\n  enabled: true,\n  fontStyle: undefined,\n  fontWeight: undefined,\n  fontSize: 12,\n  fontFamily: 'Verdana, sans-serif',\n  color: 'rgb(70, 70, 70)'\n};\nvar barLabelMapping = {\n  label: {\n    meta: {\n      defaults: __assign(__assign({}, labelDefaults), {\n        formatter: undefined,\n        placement: 'inside'\n      })\n    }\n  }\n};\nvar tooltipMapping = {\n  tooltip: {\n    meta: {\n      defaults: {\n        enabled: true,\n        renderer: undefined,\n        format: undefined\n      }\n    }\n  }\n};\nvar axisMappings = {\n  line: {\n    meta: {\n      defaults: {\n        width: 1,\n        color: 'rgb(195, 195, 195)'\n      }\n    }\n  },\n  title: {\n    meta: {\n      constructor: Caption,\n      defaults: {\n        padding: {\n          meta: {\n            constructor: Padding,\n            defaults: {\n              top: 10,\n              right: 10,\n              bottom: 10,\n              left: 10\n            }\n          }\n        },\n        text: 'Axis Title',\n        fontStyle: undefined,\n        fontWeight: 'bold',\n        fontSize: 12,\n        fontFamily: 'Verdana, sans-serif',\n        color: 'rgb(70, 70, 70)'\n      }\n    }\n  },\n  label: {\n    meta: {\n      constructor: AxisLabel,\n      defaults: {\n        fontStyle: undefined,\n        fontWeight: undefined,\n        fontSize: 12,\n        fontFamily: 'Verdana, sans-serif',\n        padding: 5,\n        rotation: 0,\n        color: 'rgb(87, 87, 87)',\n        formatter: undefined\n      }\n    }\n  },\n  tick: {\n    meta: {\n      constructor: AxisTick,\n      setAsIs: ['count'],\n      defaults: {\n        width: 1,\n        size: 6,\n        color: 'rgb(195, 195, 195)',\n        count: 10\n      }\n    }\n  }\n};\nvar mappings = (_a = {}, _a[CartesianChart.type] = __assign(__assign({\n  meta: __assign(__assign({\n    constructor: CartesianChart\n  }, chartMeta), {\n    defaults: __assign(__assign({}, chartDefaults), {\n      axes: [{\n        type: NumberAxis.type,\n        position: 'left'\n      }, {\n        type: CategoryAxis.type,\n        position: 'bottom'\n      }]\n    })\n  })\n}, commonChartMappings), {\n  axes: (_b = {}, _b[NumberAxis.type] = __assign({\n    meta: __assign({\n      constructor: NumberAxis,\n      setAsIs: ['gridStyle', 'visibleRange']\n    }, axisDefaults)\n  }, axisMappings), _b[LogAxis.type] = __assign({\n    meta: __assign(__assign({\n      constructor: LogAxis,\n      setAsIs: ['gridStyle', 'visibleRange']\n    }, axisDefaults), {\n      base: 10\n    })\n  }, axisMappings), _b[CategoryAxis.type] = __assign({\n    meta: __assign({\n      constructor: CategoryAxis,\n      setAsIs: ['gridStyle', 'visibleRange']\n    }, axisDefaults)\n  }, axisMappings), _b[GroupedCategoryAxis.type] = __assign({\n    meta: __assign({\n      constructor: GroupedCategoryAxis,\n      setAsIs: ['gridStyle', 'visibleRange']\n    }, axisDefaults)\n  }, axisMappings), _b[TimeAxis.type] = __assign({\n    meta: __assign({\n      constructor: TimeAxis,\n      setAsIs: ['gridStyle', 'visibleRange']\n    }, axisDefaults)\n  }, axisMappings), _b),\n  series: (_c = {\n    column: __assign(__assign(__assign({\n      meta: {\n        constructor: BarSeries,\n        setAsIs: ['lineDash', 'yNames'],\n        defaults: __assign(__assign({\n          flipXY: false\n        }, seriesDefaults), columnSeriesDefaults)\n      },\n      highlightStyle: {}\n    }, tooltipMapping), barLabelMapping), shadowMapping)\n  }, _c[BarSeries.type] = __assign(__assign(__assign({\n    meta: {\n      constructor: BarSeries,\n      setAsIs: ['lineDash', 'yNames'],\n      defaults: __assign(__assign({\n        flipXY: true\n      }, seriesDefaults), columnSeriesDefaults)\n    },\n    highlightStyle: {}\n  }, tooltipMapping), barLabelMapping), shadowMapping), _c[LineSeries.type] = __assign(__assign({\n    meta: {\n      constructor: LineSeries,\n      setAsIs: ['lineDash'],\n      defaults: __assign(__assign(__assign({}, seriesDefaults), {\n        title: undefined,\n        xKey: '',\n        xName: '',\n        yKey: '',\n        yName: '',\n        strokeWidth: 2,\n        strokeOpacity: 1,\n        lineDash: undefined,\n        lineDashOffset: 0\n      }), highlightStyleDefaults)\n    }\n  }, tooltipMapping), {\n    highlightStyle: {},\n    label: {\n      meta: {\n        defaults: __assign(__assign({}, labelDefaults), {\n          formatter: undefined\n        })\n      }\n    },\n    marker: {\n      meta: {\n        constructor: CartesianSeriesMarker,\n        defaults: {\n          enabled: true,\n          shape: 'circle',\n          size: 6,\n          maxSize: 30,\n          strokeWidth: 1,\n          formatter: undefined\n        }\n      }\n    }\n  }), _c[ScatterSeries.type] = __assign(__assign({\n    meta: {\n      constructor: ScatterSeries,\n      defaults: __assign(__assign(__assign({}, seriesDefaults), {\n        title: undefined,\n        xKey: '',\n        yKey: '',\n        sizeKey: undefined,\n        labelKey: undefined,\n        xName: '',\n        yName: '',\n        sizeName: 'Size',\n        labelName: 'Label',\n        strokeWidth: 2,\n        fillOpacity: 1,\n        strokeOpacity: 1\n      }), highlightStyleDefaults)\n    }\n  }, tooltipMapping), {\n    highlightStyle: {},\n    marker: {\n      meta: {\n        constructor: CartesianSeriesMarker,\n        defaults: {\n          enabled: true,\n          shape: 'circle',\n          size: 6,\n          maxSize: 30,\n          strokeWidth: 1,\n          formatter: undefined\n        }\n      }\n    },\n    label: {\n      meta: {\n        defaults: __assign({}, labelDefaults)\n      }\n    }\n  }), _c[AreaSeries.type] = __assign(__assign(__assign({\n    meta: {\n      constructor: AreaSeries,\n      setAsIs: ['lineDash'],\n      defaults: __assign(__assign(__assign({}, seriesDefaults), {\n        xKey: '',\n        xName: '',\n        yKeys: [],\n        yNames: [],\n        normalizedTo: undefined,\n        fillOpacity: 1,\n        strokeOpacity: 1,\n        strokeWidth: 2,\n        lineDash: undefined,\n        lineDashOffset: 0,\n        shadow: undefined\n      }), highlightStyleDefaults)\n    }\n  }, tooltipMapping), {\n    highlightStyle: {},\n    label: {\n      meta: {\n        defaults: __assign(__assign({}, labelDefaults), {\n          formatter: undefined\n        })\n      }\n    },\n    marker: {\n      meta: {\n        constructor: CartesianSeriesMarker,\n        defaults: {\n          enabled: true,\n          shape: 'circle',\n          size: 6,\n          maxSize: 30,\n          strokeWidth: 1,\n          formatter: undefined\n        }\n      }\n    }\n  }), shadowMapping), _c[HistogramSeries.type] = __assign(__assign(__assign({\n    meta: {\n      constructor: HistogramSeries,\n      setAsIs: ['lineDash'],\n      defaults: __assign(__assign(__assign({}, seriesDefaults), {\n        title: undefined,\n        xKey: '',\n        yKey: '',\n        xName: '',\n        yName: '',\n        strokeWidth: 1,\n        fillOpacity: 1,\n        strokeOpacity: 1,\n        lineDash: undefined,\n        lineDashOffset: 0,\n        areaPlot: false,\n        binCount: undefined,\n        bins: undefined,\n        aggregation: 'sum'\n      }), highlightStyleDefaults)\n    }\n  }, tooltipMapping), {\n    highlightStyle: {},\n    label: {\n      meta: {\n        defaults: __assign(__assign({}, labelDefaults), {\n          formatter: undefined\n        })\n      }\n    }\n  }), shadowMapping), _c),\n  navigator: {\n    meta: {\n      constructor: Navigator,\n      defaults: {\n        enabled: false,\n        height: 30,\n        min: 0,\n        max: 1\n      }\n    },\n    mask: {\n      meta: {\n        constructor: NavigatorMask,\n        defaults: {\n          fill: '#999999',\n          stroke: '#999999',\n          strokeWidth: 1,\n          fillOpacity: 0.2\n        }\n      }\n    },\n    minHandle: {\n      meta: {\n        constructor: NavigatorHandle,\n        defaults: {\n          fill: '#f2f2f2',\n          stroke: '#999999',\n          strokeWidth: 1,\n          width: 8,\n          height: 16,\n          gripLineGap: 2,\n          gripLineLength: 8\n        }\n      }\n    },\n    maxHandle: {\n      meta: {\n        constructor: NavigatorHandle,\n        defaults: {\n          fill: '#f2f2f2',\n          stroke: '#999999',\n          strokeWidth: 1,\n          width: 8,\n          height: 16,\n          gripLineGap: 2,\n          gripLineLength: 8\n        }\n      }\n    }\n  }\n}), _a[PolarChart.type] = __assign(__assign({\n  meta: __assign(__assign({\n    constructor: PolarChart\n  }, chartMeta), {\n    defaults: __assign(__assign({}, chartDefaults), {\n      padding: {\n        meta: {\n          constructor: Padding,\n          defaults: {\n            top: 40,\n            right: 40,\n            bottom: 40,\n            left: 40\n          }\n        }\n      }\n    })\n  })\n}, commonChartMappings), {\n  series: (_d = {}, _d[PieSeries.type] = __assign(__assign(__assign({\n    meta: {\n      constructor: PieSeries,\n      setAsIs: ['lineDash'],\n      defaults: __assign(__assign(__assign({}, seriesDefaults), {\n        title: undefined,\n        angleKey: '',\n        angleName: '',\n        radiusKey: undefined,\n        radiusName: undefined,\n        labelKey: undefined,\n        labelName: undefined,\n        callout: {},\n        fillOpacity: 1,\n        strokeOpacity: 1,\n        rotation: 0,\n        outerRadiusOffset: 0,\n        innerRadiusOffset: 0,\n        strokeWidth: 1,\n        lineDash: undefined,\n        lineDashOffset: 0,\n        shadow: undefined\n      }), highlightStyleDefaults)\n    }\n  }, tooltipMapping), {\n    highlightStyle: {},\n    title: {\n      meta: {\n        constructor: PieTitle,\n        defaults: {\n          enabled: true,\n          showInLegend: false,\n          padding: {\n            meta: {\n              constructor: Padding,\n              defaults: {\n                top: 10,\n                right: 10,\n                bottom: 10,\n                left: 10\n              }\n            }\n          },\n          text: 'Series Title',\n          fontStyle: undefined,\n          fontWeight: 'bold',\n          fontSize: 14,\n          fontFamily: 'Verdana, sans-serif',\n          color: 'black'\n        }\n      }\n    },\n    label: {\n      meta: {\n        defaults: __assign(__assign({}, labelDefaults), {\n          offset: 3,\n          minAngle: 20\n        })\n      }\n    },\n    callout: {\n      meta: {\n        defaults: {\n          length: 10,\n          strokeWidth: 1\n        }\n      }\n    }\n  }), shadowMapping), _d)\n}), _a[HierarchyChart.type] = __assign(__assign({\n  meta: __assign(__assign({\n    constructor: HierarchyChart\n  }, chartMeta), {\n    defaults: __assign({}, chartDefaults)\n  })\n}, commonChartMappings), {\n  series: (_e = {}, _e[TreemapSeries.type] = __assign(__assign({\n    meta: {\n      constructor: TreemapSeries,\n      defaults: __assign(__assign({}, seriesDefaults), {\n        showInLegend: false,\n        labelKey: 'label',\n        sizeKey: 'size',\n        colorKey: 'color',\n        colorDomain: [-5, 5],\n        colorRange: ['#cb4b3f', '#6acb64'],\n        colorParents: false,\n        gradient: true,\n        nodePadding: 2,\n        title: {},\n        subtitle: {},\n        labels: {\n          large: {},\n          medium: {},\n          small: {},\n          color: {}\n        }\n      })\n    }\n  }, tooltipMapping), {\n    title: {\n      meta: {\n        defaults: {\n          enabled: true,\n          color: 'white',\n          fontStyle: undefined,\n          fontWeight: 'bold',\n          fontSize: 12,\n          fontFamily: 'Verdana, sans-serif',\n          padding: 15\n        }\n      }\n    },\n    subtitle: {\n      meta: {\n        defaults: {\n          enabled: true,\n          color: 'white',\n          fontStyle: undefined,\n          fontWeight: undefined,\n          fontSize: 9,\n          fontFamily: 'Verdana, sans-serif',\n          padding: 13\n        }\n      }\n    },\n    labels: {\n      meta: {\n        defaults: {\n          large: {},\n          medium: {},\n          small: {},\n          color: {}\n        }\n      },\n      large: {\n        meta: {\n          constructor: Label,\n          defaults: {\n            enabled: true,\n            fontStyle: undefined,\n            fontWeight: 'bold',\n            fontSize: 18,\n            fontFamily: 'Verdana, sans-serif',\n            color: 'white'\n          }\n        }\n      },\n      medium: {\n        meta: {\n          constructor: Label,\n          defaults: {\n            enabled: true,\n            fontStyle: undefined,\n            fontWeight: 'bold',\n            fontSize: 14,\n            fontFamily: 'Verdana, sans-serif',\n            color: 'white'\n          }\n        }\n      },\n      small: {\n        meta: {\n          constructor: Label,\n          defaults: {\n            enabled: true,\n            fontStyle: undefined,\n            fontWeight: 'bold',\n            fontSize: 10,\n            fontFamily: 'Verdana, sans-serif',\n            color: 'white'\n          }\n        }\n      },\n      color: {\n        meta: {\n          constructor: Label,\n          defaults: {\n            enabled: true,\n            fontStyle: undefined,\n            fontWeight: undefined,\n            fontSize: 12,\n            fontFamily: 'Verdana, sans-serif',\n            color: 'white'\n          }\n        }\n      }\n    }\n  }), _e)\n}), _a); // Amend the `mappings` object with aliases for different chart types.\n\n{\n  var typeToAliases = {\n    cartesian: ['line', 'area', 'bar', 'column'],\n    polar: ['pie'],\n    hierarchy: ['treemap']\n  };\n\n  var _loop_1 = function _loop_1(type) {\n    typeToAliases[type].forEach(function (alias) {\n      mappings[alias] = mappings[type];\n    });\n  };\n\n  for (var type in typeToAliases) {\n    _loop_1(type);\n  }\n} // Special handling for scatter and histogram charts, for which both axes should default to type `number`.\n\nmappings['scatter'] = mappings['histogram'] = __assign(__assign({}, mappings.cartesian), {\n  meta: __assign(__assign({}, mappings.cartesian.meta), {\n    defaults: __assign(__assign({}, chartDefaults), {\n      axes: [{\n        type: 'number',\n        position: 'bottom'\n      }, {\n        type: 'number',\n        position: 'left'\n      }]\n    })\n  })\n});\nvar groupedCategoryChartMapping = Object.create(mappings[CartesianChart.type]);\nvar groupedCategoryChartMeta = Object.create(groupedCategoryChartMapping.meta);\ngroupedCategoryChartMeta.constructor = GroupedCategoryChart;\ngroupedCategoryChartMapping.meta = groupedCategoryChartMeta;\nmappings[GroupedCategoryChart.type] = groupedCategoryChartMapping;\nexport default mappings;","map":{"version":3,"sources":["/Users/julianneagresta/Projects/openlibrary-search-histogram/node_modules/ag-charts-community/dist/es6/chart/agChartMappings.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","_a","_b","_c","_d","_e","Padding","CartesianChart","GroupedCategoryChart","NumberAxis","CategoryAxis","GroupedCategoryAxis","LineSeries","BarSeries","HistogramSeries","ScatterSeries","AreaSeries","PolarChart","PieSeries","PieTitle","AxisLabel","AxisTick","TimeAxis","Caption","DropShadow","Legend","LegendPosition","LegendItem","LegendMarker","LegendLabel","Navigator","NavigatorMask","NavigatorHandle","CartesianSeriesMarker","Chart","HierarchyChart","TreemapSeries","LogAxis","Label","chartPadding","commonChartMappings","background","meta","defaults","visible","fill","padding","constructor","top","right","bottom","left","tooltip","enabled","tracking","delay","class","defaultTooltipClass","title","text","fontStyle","undefined","fontWeight","fontSize","fontFamily","color","subtitle","legend","position","Right","spacing","item","paddingX","paddingY","marker","shape","size","strokeWidth","label","formatter","chartDefaults","container","autoSize","width","height","data","navigator","mask","minHandle","maxHandle","listeners","chartMeta","constructorParams","setAsIs","nonSerializable","axisDefaults","visibleRange","thickness","tick","line","gridStyle","stroke","lineDash","seriesDefaults","showInLegend","cursor","highlightStyleDefaults","highlightStyle","series","dimOpacity","columnSeriesDefaults","fillOpacity","strokeOpacity","xKey","xName","yKeys","yNames","grouped","normalizedTo","lineDashOffset","shadow","shadowMapping","xOffset","yOffset","blur","labelDefaults","barLabelMapping","placement","tooltipMapping","renderer","format","axisMappings","rotation","count","mappings","type","axes","base","column","flipXY","yKey","yName","maxSize","sizeKey","labelKey","sizeName","labelName","areaPlot","binCount","bins","aggregation","min","max","gripLineGap","gripLineLength","angleKey","angleName","radiusKey","radiusName","callout","outerRadiusOffset","innerRadiusOffset","offset","minAngle","colorKey","colorDomain","colorRange","colorParents","gradient","nodePadding","labels","large","medium","small","typeToAliases","cartesian","polar","hierarchy","_loop_1","forEach","alias","groupedCategoryChartMapping","create","groupedCategoryChartMeta"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a, _b, _c, _d, _e;\nimport { Padding } from \"../util/padding\";\nimport { CartesianChart } from \"./cartesianChart\";\nimport { GroupedCategoryChart } from \"./groupedCategoryChart\";\nimport { NumberAxis } from \"./axis/numberAxis\";\nimport { CategoryAxis } from \"./axis/categoryAxis\";\nimport { GroupedCategoryAxis } from \"./axis/groupedCategoryAxis\";\nimport { LineSeries } from \"./series/cartesian/lineSeries\";\nimport { BarSeries } from \"./series/cartesian/barSeries\";\nimport { HistogramSeries } from \"./series/cartesian/histogramSeries\";\nimport { ScatterSeries } from \"./series/cartesian/scatterSeries\";\nimport { AreaSeries } from \"./series/cartesian/areaSeries\";\nimport { PolarChart } from \"./polarChart\";\nimport { PieSeries, PieTitle } from \"./series/polar/pieSeries\";\nimport { AxisLabel, AxisTick } from \"../axis\";\nimport { TimeAxis } from \"./axis/timeAxis\";\nimport { Caption } from \"../caption\";\nimport { DropShadow } from \"../scene/dropShadow\";\nimport { Legend, LegendPosition, LegendItem, LegendMarker, LegendLabel } from \"./legend\";\nimport { Navigator } from \"./navigator/navigator\";\nimport { NavigatorMask } from \"./navigator/navigatorMask\";\nimport { NavigatorHandle } from \"./navigator/navigatorHandle\";\nimport { CartesianSeriesMarker } from \"./series/cartesian/cartesianSeries\";\nimport { Chart } from \"./chart\";\nimport { HierarchyChart } from \"./hierarchyChart\";\nimport { TreemapSeries } from \"./series/hierarchy/treemapSeries\";\nimport { LogAxis } from \"./axis/logAxis\";\nimport { Label } from \"./label\";\n/*\n    This file defines the specs for creating different kinds of charts, but\n    contains no code that uses the specs to actually create charts\n*/\nvar chartPadding = 20;\nvar commonChartMappings = {\n    background: {\n        meta: {\n            defaults: {\n                visible: true,\n                fill: 'white'\n            }\n        }\n    },\n    padding: {\n        meta: {\n            constructor: Padding,\n            defaults: {\n                top: chartPadding,\n                right: chartPadding,\n                bottom: chartPadding,\n                left: chartPadding\n            }\n        }\n    },\n    tooltip: {\n        meta: {\n            defaults: {\n                enabled: true,\n                tracking: true,\n                delay: 0,\n                class: Chart.defaultTooltipClass\n            }\n        }\n    },\n    title: {\n        meta: {\n            constructor: Caption,\n            defaults: {\n                enabled: false,\n                padding: {\n                    meta: {\n                        constructor: Padding,\n                        defaults: {\n                            top: 10,\n                            right: 10,\n                            bottom: 10,\n                            left: 10\n                        }\n                    }\n                },\n                text: 'Title',\n                fontStyle: undefined,\n                fontWeight: 'bold',\n                fontSize: 14,\n                fontFamily: 'Verdana, sans-serif',\n                color: 'rgb(70, 70, 70)'\n            }\n        }\n    },\n    subtitle: {\n        meta: {\n            constructor: Caption,\n            defaults: {\n                enabled: false,\n                padding: {\n                    meta: {\n                        constructor: Padding,\n                        defaults: {\n                            top: 10,\n                            right: 10,\n                            bottom: 10,\n                            left: 10\n                        }\n                    }\n                },\n                text: 'Subtitle',\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: 'Verdana, sans-serif',\n                color: 'rgb(140, 140, 140)'\n            }\n        }\n    },\n    legend: {\n        meta: {\n            constructor: Legend,\n            defaults: {\n                enabled: true,\n                position: LegendPosition.Right,\n                spacing: 20\n            }\n        },\n        item: {\n            meta: {\n                constructor: LegendItem,\n                defaults: {\n                    paddingX: 16,\n                    paddingY: 8\n                }\n            },\n            marker: {\n                meta: {\n                    constructor: LegendMarker,\n                    defaults: {\n                        shape: undefined,\n                        size: 15,\n                        strokeWidth: 1,\n                        padding: 8\n                    }\n                }\n            },\n            label: {\n                meta: {\n                    constructor: LegendLabel,\n                    defaults: {\n                        color: 'black',\n                        fontStyle: undefined,\n                        fontWeight: undefined,\n                        fontSize: 12,\n                        fontFamily: 'Verdana, sans-serif',\n                        formatter: undefined\n                    }\n                }\n            }\n        }\n    }\n};\nvar chartDefaults = {\n    container: undefined,\n    autoSize: true,\n    width: 600,\n    height: 300,\n    data: [],\n    title: undefined,\n    subtitle: undefined,\n    padding: {},\n    background: {},\n    legend: {\n        item: {\n            marker: {},\n            label: {}\n        }\n    },\n    navigator: {\n        mask: {},\n        minHandle: {},\n        maxHandle: {}\n    },\n    listeners: undefined\n};\nvar chartMeta = {\n    // Charts components' constructors normally don't take any parameters (which makes things consistent -- everything\n    // is configured the same way, via the properties, and makes the factory pattern work well) but the charts\n    // themselves are the exceptions.\n    // If a chart config has the (optional) `document` property, it will be passed to the constructor.\n    // There is no actual `document` property on the chart, it can only be supplied during instantiation.\n    constructorParams: ['document'],\n    setAsIs: ['container', 'data', 'tooltipOffset'],\n    nonSerializable: ['container', 'data']\n};\nvar axisDefaults = {\n    defaults: {\n        visibleRange: [0, 1],\n        thickness: 0,\n        label: {},\n        tick: {},\n        title: {},\n        line: {},\n        gridStyle: [{\n                stroke: 'rgb(219, 219, 219)',\n                lineDash: [4, 2]\n            }]\n    }\n};\nvar seriesDefaults = {\n    visible: true,\n    showInLegend: true,\n    cursor: 'default',\n    listeners: undefined\n};\nvar highlightStyleDefaults = {\n    highlightStyle: {\n        fill: 'yellow',\n        series: {\n            enabled: false,\n            dimOpacity: 0.3\n        }\n    }\n};\nvar columnSeriesDefaults = __assign({ fillOpacity: 1, strokeOpacity: 1, xKey: '', xName: '', yKeys: [], yNames: {}, grouped: false, normalizedTo: undefined, strokeWidth: 1, lineDash: undefined, lineDashOffset: 0, shadow: undefined }, highlightStyleDefaults);\nvar shadowMapping = {\n    shadow: {\n        meta: {\n            constructor: DropShadow,\n            defaults: {\n                enabled: true,\n                color: 'rgba(0, 0, 0, 0.5)',\n                xOffset: 0,\n                yOffset: 0,\n                blur: 5\n            }\n        }\n    }\n};\nvar labelDefaults = {\n    enabled: true,\n    fontStyle: undefined,\n    fontWeight: undefined,\n    fontSize: 12,\n    fontFamily: 'Verdana, sans-serif',\n    color: 'rgb(70, 70, 70)'\n};\nvar barLabelMapping = {\n    label: {\n        meta: {\n            defaults: __assign(__assign({}, labelDefaults), { formatter: undefined, placement: 'inside' })\n        }\n    }\n};\nvar tooltipMapping = {\n    tooltip: {\n        meta: {\n            defaults: {\n                enabled: true,\n                renderer: undefined,\n                format: undefined\n            }\n        }\n    }\n};\nvar axisMappings = {\n    line: {\n        meta: {\n            defaults: {\n                width: 1,\n                color: 'rgb(195, 195, 195)'\n            }\n        }\n    },\n    title: {\n        meta: {\n            constructor: Caption,\n            defaults: {\n                padding: {\n                    meta: {\n                        constructor: Padding,\n                        defaults: {\n                            top: 10,\n                            right: 10,\n                            bottom: 10,\n                            left: 10\n                        }\n                    }\n                },\n                text: 'Axis Title',\n                fontStyle: undefined,\n                fontWeight: 'bold',\n                fontSize: 12,\n                fontFamily: 'Verdana, sans-serif',\n                color: 'rgb(70, 70, 70)'\n            }\n        }\n    },\n    label: {\n        meta: {\n            constructor: AxisLabel,\n            defaults: {\n                fontStyle: undefined,\n                fontWeight: undefined,\n                fontSize: 12,\n                fontFamily: 'Verdana, sans-serif',\n                padding: 5,\n                rotation: 0,\n                color: 'rgb(87, 87, 87)',\n                formatter: undefined\n            }\n        }\n    },\n    tick: {\n        meta: {\n            constructor: AxisTick,\n            setAsIs: ['count'],\n            defaults: {\n                width: 1,\n                size: 6,\n                color: 'rgb(195, 195, 195)',\n                count: 10\n            }\n        }\n    }\n};\nvar mappings = (_a = {},\n    _a[CartesianChart.type] = __assign(__assign({ meta: __assign(__assign({ constructor: CartesianChart }, chartMeta), { defaults: __assign(__assign({}, chartDefaults), { axes: [{\n                        type: NumberAxis.type,\n                        position: 'left'\n                    }, {\n                        type: CategoryAxis.type,\n                        position: 'bottom'\n                    }] }) }) }, commonChartMappings), { axes: (_b = {},\n            _b[NumberAxis.type] = __assign({ meta: __assign({ constructor: NumberAxis, setAsIs: ['gridStyle', 'visibleRange'] }, axisDefaults) }, axisMappings),\n            _b[LogAxis.type] = __assign({ meta: __assign(__assign({ constructor: LogAxis, setAsIs: ['gridStyle', 'visibleRange'] }, axisDefaults), { base: 10 }) }, axisMappings),\n            _b[CategoryAxis.type] = __assign({ meta: __assign({ constructor: CategoryAxis, setAsIs: ['gridStyle', 'visibleRange'] }, axisDefaults) }, axisMappings),\n            _b[GroupedCategoryAxis.type] = __assign({ meta: __assign({ constructor: GroupedCategoryAxis, setAsIs: ['gridStyle', 'visibleRange'] }, axisDefaults) }, axisMappings),\n            _b[TimeAxis.type] = __assign({ meta: __assign({ constructor: TimeAxis, setAsIs: ['gridStyle', 'visibleRange'] }, axisDefaults) }, axisMappings),\n            _b), series: (_c = {\n                column: __assign(__assign(__assign({ meta: {\n                        constructor: BarSeries,\n                        setAsIs: ['lineDash', 'yNames'],\n                        defaults: __assign(__assign({ flipXY: false }, seriesDefaults), columnSeriesDefaults)\n                    }, highlightStyle: {} }, tooltipMapping), barLabelMapping), shadowMapping)\n            },\n            _c[BarSeries.type] = __assign(__assign(__assign({ meta: {\n                    constructor: BarSeries,\n                    setAsIs: ['lineDash', 'yNames'],\n                    defaults: __assign(__assign({ flipXY: true }, seriesDefaults), columnSeriesDefaults)\n                }, highlightStyle: {} }, tooltipMapping), barLabelMapping), shadowMapping),\n            _c[LineSeries.type] = __assign(__assign({ meta: {\n                    constructor: LineSeries,\n                    setAsIs: ['lineDash'],\n                    defaults: __assign(__assign(__assign({}, seriesDefaults), { title: undefined, xKey: '', xName: '', yKey: '', yName: '', strokeWidth: 2, strokeOpacity: 1, lineDash: undefined, lineDashOffset: 0 }), highlightStyleDefaults)\n                } }, tooltipMapping), { highlightStyle: {}, label: {\n                    meta: {\n                        defaults: __assign(__assign({}, labelDefaults), { formatter: undefined })\n                    }\n                }, marker: {\n                    meta: {\n                        constructor: CartesianSeriesMarker,\n                        defaults: {\n                            enabled: true,\n                            shape: 'circle',\n                            size: 6,\n                            maxSize: 30,\n                            strokeWidth: 1,\n                            formatter: undefined\n                        }\n                    }\n                } }),\n            _c[ScatterSeries.type] = __assign(__assign({ meta: {\n                    constructor: ScatterSeries,\n                    defaults: __assign(__assign(__assign({}, seriesDefaults), { title: undefined, xKey: '', yKey: '', sizeKey: undefined, labelKey: undefined, xName: '', yName: '', sizeName: 'Size', labelName: 'Label', strokeWidth: 2, fillOpacity: 1, strokeOpacity: 1 }), highlightStyleDefaults)\n                } }, tooltipMapping), { highlightStyle: {}, marker: {\n                    meta: {\n                        constructor: CartesianSeriesMarker,\n                        defaults: {\n                            enabled: true,\n                            shape: 'circle',\n                            size: 6,\n                            maxSize: 30,\n                            strokeWidth: 1,\n                            formatter: undefined\n                        }\n                    }\n                }, label: {\n                    meta: {\n                        defaults: __assign({}, labelDefaults)\n                    }\n                } }),\n            _c[AreaSeries.type] = __assign(__assign(__assign({ meta: {\n                    constructor: AreaSeries,\n                    setAsIs: ['lineDash'],\n                    defaults: __assign(__assign(__assign({}, seriesDefaults), { xKey: '', xName: '', yKeys: [], yNames: [], normalizedTo: undefined, fillOpacity: 1, strokeOpacity: 1, strokeWidth: 2, lineDash: undefined, lineDashOffset: 0, shadow: undefined }), highlightStyleDefaults)\n                } }, tooltipMapping), { highlightStyle: {}, label: {\n                    meta: {\n                        defaults: __assign(__assign({}, labelDefaults), { formatter: undefined })\n                    }\n                }, marker: {\n                    meta: {\n                        constructor: CartesianSeriesMarker,\n                        defaults: {\n                            enabled: true,\n                            shape: 'circle',\n                            size: 6,\n                            maxSize: 30,\n                            strokeWidth: 1,\n                            formatter: undefined\n                        }\n                    }\n                } }), shadowMapping),\n            _c[HistogramSeries.type] = __assign(__assign(__assign({ meta: {\n                    constructor: HistogramSeries,\n                    setAsIs: ['lineDash'],\n                    defaults: __assign(__assign(__assign({}, seriesDefaults), { title: undefined, xKey: '', yKey: '', xName: '', yName: '', strokeWidth: 1, fillOpacity: 1, strokeOpacity: 1, lineDash: undefined, lineDashOffset: 0, areaPlot: false, binCount: undefined, bins: undefined, aggregation: 'sum' }), highlightStyleDefaults)\n                } }, tooltipMapping), { highlightStyle: {}, label: {\n                    meta: {\n                        defaults: __assign(__assign({}, labelDefaults), { formatter: undefined })\n                    }\n                } }), shadowMapping),\n            _c), navigator: {\n            meta: {\n                constructor: Navigator,\n                defaults: {\n                    enabled: false,\n                    height: 30,\n                    min: 0,\n                    max: 1\n                }\n            },\n            mask: {\n                meta: {\n                    constructor: NavigatorMask,\n                    defaults: {\n                        fill: '#999999',\n                        stroke: '#999999',\n                        strokeWidth: 1,\n                        fillOpacity: 0.2\n                    }\n                }\n            },\n            minHandle: {\n                meta: {\n                    constructor: NavigatorHandle,\n                    defaults: {\n                        fill: '#f2f2f2',\n                        stroke: '#999999',\n                        strokeWidth: 1,\n                        width: 8,\n                        height: 16,\n                        gripLineGap: 2,\n                        gripLineLength: 8\n                    }\n                }\n            },\n            maxHandle: {\n                meta: {\n                    constructor: NavigatorHandle,\n                    defaults: {\n                        fill: '#f2f2f2',\n                        stroke: '#999999',\n                        strokeWidth: 1,\n                        width: 8,\n                        height: 16,\n                        gripLineGap: 2,\n                        gripLineLength: 8\n                    }\n                }\n            }\n        } }),\n    _a[PolarChart.type] = __assign(__assign({ meta: __assign(__assign({ constructor: PolarChart }, chartMeta), { defaults: __assign(__assign({}, chartDefaults), { padding: {\n                    meta: {\n                        constructor: Padding,\n                        defaults: {\n                            top: 40,\n                            right: 40,\n                            bottom: 40,\n                            left: 40\n                        }\n                    }\n                } }) }) }, commonChartMappings), { series: (_d = {},\n            _d[PieSeries.type] = __assign(__assign(__assign({ meta: {\n                    constructor: PieSeries,\n                    setAsIs: ['lineDash'],\n                    defaults: __assign(__assign(__assign({}, seriesDefaults), { title: undefined, angleKey: '', angleName: '', radiusKey: undefined, radiusName: undefined, labelKey: undefined, labelName: undefined, callout: {}, fillOpacity: 1, strokeOpacity: 1, rotation: 0, outerRadiusOffset: 0, innerRadiusOffset: 0, strokeWidth: 1, lineDash: undefined, lineDashOffset: 0, shadow: undefined }), highlightStyleDefaults)\n                } }, tooltipMapping), { highlightStyle: {}, title: {\n                    meta: {\n                        constructor: PieTitle,\n                        defaults: {\n                            enabled: true,\n                            showInLegend: false,\n                            padding: {\n                                meta: {\n                                    constructor: Padding,\n                                    defaults: {\n                                        top: 10,\n                                        right: 10,\n                                        bottom: 10,\n                                        left: 10\n                                    }\n                                }\n                            },\n                            text: 'Series Title',\n                            fontStyle: undefined,\n                            fontWeight: 'bold',\n                            fontSize: 14,\n                            fontFamily: 'Verdana, sans-serif',\n                            color: 'black'\n                        }\n                    }\n                }, label: {\n                    meta: {\n                        defaults: __assign(__assign({}, labelDefaults), { offset: 3, minAngle: 20 })\n                    }\n                }, callout: {\n                    meta: {\n                        defaults: {\n                            length: 10,\n                            strokeWidth: 1\n                        }\n                    }\n                } }), shadowMapping),\n            _d) }),\n    _a[HierarchyChart.type] = __assign(__assign({ meta: __assign(__assign({ constructor: HierarchyChart }, chartMeta), { defaults: __assign({}, chartDefaults) }) }, commonChartMappings), { series: (_e = {},\n            _e[TreemapSeries.type] = __assign(__assign({ meta: {\n                    constructor: TreemapSeries,\n                    defaults: __assign(__assign({}, seriesDefaults), { showInLegend: false, labelKey: 'label', sizeKey: 'size', colorKey: 'color', colorDomain: [-5, 5], colorRange: ['#cb4b3f', '#6acb64'], colorParents: false, gradient: true, nodePadding: 2, title: {}, subtitle: {}, labels: {\n                            large: {},\n                            medium: {},\n                            small: {},\n                            color: {}\n                        } })\n                } }, tooltipMapping), { title: {\n                    meta: {\n                        defaults: {\n                            enabled: true,\n                            color: 'white',\n                            fontStyle: undefined,\n                            fontWeight: 'bold',\n                            fontSize: 12,\n                            fontFamily: 'Verdana, sans-serif',\n                            padding: 15\n                        }\n                    }\n                }, subtitle: {\n                    meta: {\n                        defaults: {\n                            enabled: true,\n                            color: 'white',\n                            fontStyle: undefined,\n                            fontWeight: undefined,\n                            fontSize: 9,\n                            fontFamily: 'Verdana, sans-serif',\n                            padding: 13\n                        }\n                    }\n                }, labels: {\n                    meta: {\n                        defaults: {\n                            large: {},\n                            medium: {},\n                            small: {},\n                            color: {}\n                        }\n                    },\n                    large: {\n                        meta: {\n                            constructor: Label,\n                            defaults: {\n                                enabled: true,\n                                fontStyle: undefined,\n                                fontWeight: 'bold',\n                                fontSize: 18,\n                                fontFamily: 'Verdana, sans-serif',\n                                color: 'white'\n                            }\n                        }\n                    },\n                    medium: {\n                        meta: {\n                            constructor: Label,\n                            defaults: {\n                                enabled: true,\n                                fontStyle: undefined,\n                                fontWeight: 'bold',\n                                fontSize: 14,\n                                fontFamily: 'Verdana, sans-serif',\n                                color: 'white'\n                            }\n                        }\n                    },\n                    small: {\n                        meta: {\n                            constructor: Label,\n                            defaults: {\n                                enabled: true,\n                                fontStyle: undefined,\n                                fontWeight: 'bold',\n                                fontSize: 10,\n                                fontFamily: 'Verdana, sans-serif',\n                                color: 'white'\n                            }\n                        }\n                    },\n                    color: {\n                        meta: {\n                            constructor: Label,\n                            defaults: {\n                                enabled: true,\n                                fontStyle: undefined,\n                                fontWeight: undefined,\n                                fontSize: 12,\n                                fontFamily: 'Verdana, sans-serif',\n                                color: 'white'\n                            }\n                        }\n                    }\n                } }),\n            _e) }),\n    _a);\n// Amend the `mappings` object with aliases for different chart types.\n{\n    var typeToAliases = {\n        cartesian: ['line', 'area', 'bar', 'column'],\n        polar: ['pie'],\n        hierarchy: ['treemap']\n    };\n    var _loop_1 = function (type) {\n        typeToAliases[type].forEach(function (alias) {\n            mappings[alias] = mappings[type];\n        });\n    };\n    for (var type in typeToAliases) {\n        _loop_1(type);\n    }\n}\n// Special handling for scatter and histogram charts, for which both axes should default to type `number`.\nmappings['scatter'] =\n    mappings['histogram'] = __assign(__assign({}, mappings.cartesian), { meta: __assign(__assign({}, mappings.cartesian.meta), { defaults: __assign(__assign({}, chartDefaults), { axes: [{\n                        type: 'number',\n                        position: 'bottom'\n                    }, {\n                        type: 'number',\n                        position: 'left'\n                    }] }) }) });\nvar groupedCategoryChartMapping = Object.create(mappings[CartesianChart.type]);\nvar groupedCategoryChartMeta = Object.create(groupedCategoryChartMapping.meta);\ngroupedCategoryChartMeta.constructor = GroupedCategoryChart;\ngroupedCategoryChartMapping.meta = groupedCategoryChartMeta;\nmappings[GroupedCategoryChart.type] = groupedCategoryChartMapping;\nexport default mappings;\n"]},"metadata":{},"sourceType":"module"}