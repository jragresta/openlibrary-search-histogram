{"ast":null,"code":"import { tickStep } from './ticks';\nvar formatTypes = {\n  // Multiply by 100, and then decimal notation with a percent sign.\n  '%': function _(x, p) {\n    return (x * 100).toFixed(p);\n  },\n  // Binary notation, rounded to integer.\n  'b': function b(x) {\n    return Math.round(x).toString(2);\n  },\n  // Converts the integer to the corresponding unicode character before printing.\n  'c': function c(x) {\n    return String(x);\n  },\n  // Decimal notation, rounded to integer.\n  'd': formatDecimal,\n  // Exponent notation.\n  'e': function e(x, p) {\n    return x.toExponential(p);\n  },\n  // Fixed point notation.\n  'f': function f(x, p) {\n    return x.toFixed(p);\n  },\n  // Either decimal or exponent notation, rounded to significant digits.\n  'g': function g(x, p) {\n    return x.toPrecision(p);\n  },\n  // Octal notation, rounded to integer.\n  'o': function o(x) {\n    return Math.round(x).toString(8);\n  },\n  // Multiply by 100, round to significant digits, and then decimal notation with a percent sign.\n  'p': function p(x, _p) {\n    return formatRounded(x * 100, _p);\n  },\n  // Decimal notation, rounded to significant digits.\n  'r': formatRounded,\n  // Decimal notation with a SI prefix, rounded to significant digits.\n  's': formatPrefixAuto,\n  // Hexadecimal notation, using upper-case letters, rounded to integer.\n  'X': function X(x) {\n    return Math.round(x).toString(16).toUpperCase();\n  },\n  // Hexadecimal notation, using lower-case letters, rounded to integer.\n  'x': function x(_x) {\n    return Math.round(_x).toString(16);\n  }\n};\nvar prefixes = ['y', 'z', 'a', 'f', 'p', 'n', '\\xB5', 'm', '', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\n/**\n * [[fill]align][sign][#][0][width][grouping_option][.precision][type]\n */\n\nvar FormatSpecifier = function () {\n  function FormatSpecifier(specifier) {\n    if (specifier instanceof FormatSpecifier) {\n      this.fill = specifier.fill;\n      this.align = specifier.align;\n      this.sign = specifier.sign;\n      this.symbol = specifier.symbol;\n      this.zero = specifier.zero;\n      this.width = specifier.width;\n      this.comma = specifier.comma;\n      this.precision = specifier.precision;\n      this.trim = specifier.trim;\n      this.type = specifier.type;\n      this.string = specifier.string;\n    } else {\n      this.fill = specifier.fill === undefined ? ' ' : String(specifier.fill);\n      this.align = specifier.align === undefined ? '>' : String(specifier.align);\n      this.sign = specifier.sign === undefined ? '-' : String(specifier.sign);\n      this.symbol = specifier.symbol === undefined ? '' : String(specifier.symbol);\n      this.zero = !!specifier.zero;\n      this.width = specifier.width === undefined ? undefined : +specifier.width;\n      this.comma = !!specifier.comma;\n      this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n      this.trim = !!specifier.trim;\n      this.type = specifier.type === undefined ? '' : String(specifier.type);\n      this.string = specifier.string;\n    }\n  }\n\n  return FormatSpecifier;\n}();\n\nexport { FormatSpecifier }; // [[fill]align][sign][symbol][0][width][,][.precision][~][type]\n\nvar formatRegEx = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\nvar interpolateRegEx = /(#\\{(.*?)\\})/g;\nexport function makeFormatSpecifier(specifier) {\n  if (specifier instanceof FormatSpecifier) {\n    return new FormatSpecifier(specifier);\n  }\n\n  var found = false;\n  var string = specifier.replace(interpolateRegEx, function () {\n    if (!found) {\n      specifier = arguments[2];\n      found = true;\n    }\n\n    return '#{}';\n  });\n  var match = formatRegEx.exec(specifier);\n\n  if (!match) {\n    throw new Error(\"Invalid format: \" + specifier);\n  }\n\n  return new FormatSpecifier({\n    fill: match[1],\n    align: match[2],\n    sign: match[3],\n    symbol: match[4],\n    zero: match[5],\n    width: match[6],\n    comma: match[7],\n    precision: match[8] && match[8].slice(1),\n    trim: match[9],\n    type: match[10],\n    string: found ? string : undefined\n  });\n}\nexport function tickFormat(start, stop, count, specifier) {\n  var step = tickStep(start, stop, count);\n  var formatSpecifier = makeFormatSpecifier(specifier == undefined ? ',f' : specifier);\n\n  switch (formatSpecifier.type) {\n    case 's':\n      {\n        var value = Math.max(Math.abs(start), Math.abs(stop));\n\n        if (formatSpecifier.precision == null) {\n          var precision = precisionPrefix(step, value);\n\n          if (!isNaN(precision)) {\n            formatSpecifier.precision = precision;\n          }\n        }\n\n        return formatPrefix(formatSpecifier, value);\n      }\n\n    case '':\n    case 'e':\n    case 'g':\n    case 'p':\n    case 'r':\n      {\n        if (formatSpecifier.precision == null) {\n          var precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop)));\n\n          if (!isNaN(precision)) {\n            formatSpecifier.precision = precision - Number(formatSpecifier.type === 'e');\n          }\n        }\n\n        break;\n      }\n\n    case 'f':\n    case '%':\n      {\n        if (formatSpecifier.precision == null) {\n          var precision = precisionFixed(step);\n\n          if (!isNaN(precision)) {\n            formatSpecifier.precision = precision - Number(formatSpecifier.type === '%') * 2;\n          }\n        }\n\n        break;\n      }\n  }\n\n  return format(formatSpecifier);\n}\nvar prefixExponent;\n\nfunction formatPrefixAuto(x, p) {\n  var d = formatDecimalParts(x, p);\n\n  if (!d) {\n    return String(x);\n  }\n\n  var coefficient = d[0];\n  var exponent = d[1];\n  prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3;\n  var i = exponent - prefixExponent + 1;\n  var n = coefficient.length;\n\n  if (i === n) {\n    return coefficient;\n  } else {\n    if (i > n) {\n      return coefficient + new Array(i - n + 1).join('0');\n    }\n\n    if (i > 0) {\n      return coefficient.slice(0, i) + '.' + coefficient.slice(i);\n    } else {\n      var parts = formatDecimalParts(x, Math.max(0, p + i - 1));\n      return '0.' + new Array(1 - i).join('0') + parts[0]; // less than 1y!\n    }\n  }\n}\n\nfunction formatDecimal(x) {\n  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString('en').replace(/,/g, '') : x.toString(10);\n}\n\nfunction formatGroup(grouping, thousands) {\n  return function (value, width) {\n    var t = [];\n    var i = value.length;\n    var j = 0;\n    var g = grouping[0];\n    var length = 0;\n\n    while (i > 0 && g > 0) {\n      if (length + g + 1 > width) {\n        g = Math.max(1, width - length);\n      }\n\n      t.push(value.substring(i -= g, i + g));\n\n      if ((length += g + 1) > width) {\n        break;\n      }\n\n      g = grouping[j = (j + 1) % grouping.length];\n    }\n\n    return t.reverse().join(thousands);\n  };\n}\n\nexport function formatNumerals(numerals) {\n  return function (value) {\n    return value.replace(/[0-9]/g, function (i) {\n      return numerals[+i];\n    });\n  };\n} // Trim insignificant zeros.\n\nfunction formatTrim(s) {\n  var n = s.length;\n  var i = 1;\n  var i0 = -1;\n  var i1 = NaN;\n\n  out: for (; i < n; i++) {\n    switch (s[i]) {\n      case '.':\n        i0 = i1 = i;\n        break;\n\n      case '0':\n        if (i0 === 0) {\n          i0 = i;\n          i1 = i;\n        }\n\n        break;\n\n      default:\n        if (!+s[i]) {\n          break out;\n        }\n\n        if (i0 > 0) {\n          i0 = 0;\n          break;\n        }\n\n    }\n  }\n\n  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\n\nfunction formatRounded(x, p) {\n  var d = formatDecimalParts(x, p);\n\n  if (!d) {\n    return String(x);\n  }\n\n  var coefficient = d[0];\n  var exponent = d[1];\n\n  if (exponent < 0) {\n    return '0.' + new Array(-exponent).join('0') + coefficient;\n  } else {\n    if (coefficient.length > exponent + 1) {\n      return coefficient.slice(0, exponent + 1) + '.' + coefficient.slice(exponent + 1);\n    } else {\n      return coefficient + new Array(exponent - coefficient.length + 2).join('0');\n    }\n  }\n} // Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns ['123', 0].\n\n\nexport function formatDecimalParts(x, p) {\n  var sx = p ? x.toExponential(p - 1) : x.toExponential();\n  var i = sx.indexOf('e');\n\n  if (i < 0) {\n    // NaN, Â±Infinity\n    return undefined;\n  }\n\n  var coefficient = sx.slice(0, i); // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n\n  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +sx.slice(i + 1)];\n}\n\nfunction identity(x) {\n  return x;\n}\n\nexport var formatDefaultLocale;\nexport var format;\nexport var formatPrefix;\ndefaultLocale({\n  thousands: ',',\n  grouping: [3],\n  currency: ['$', '']\n});\n\nfunction defaultLocale(definition) {\n  formatDefaultLocale = formatLocale(definition);\n  format = formatDefaultLocale.format;\n  formatPrefix = formatDefaultLocale.formatPrefix;\n}\n\nfunction exponent(x) {\n  var parts = formatDecimalParts(Math.abs(x));\n\n  if (parts) {\n    return parts[1];\n  }\n\n  return NaN;\n}\n\nfunction precisionFixed(step) {\n  return Math.max(0, -exponent(Math.abs(step)));\n}\n\nfunction precisionPrefix(step, value) {\n  var x = Math.floor(exponent(value) / 3);\n  x = Math.min(8, x);\n  x = Math.max(-8, x);\n  return Math.max(0, x * 3 - exponent(Math.abs(step)));\n}\n\nfunction precisionRound(step, max) {\n  step = Math.abs(step);\n  max = Math.abs(max) - step;\n  return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\n\nexport function formatLocale(locale) {\n  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(Array.prototype.map.call(locale.grouping, Number), String(locale.thousands));\n  var currencyPrefix = locale.currency === undefined ? '' : String(locale.currency[0]);\n  var currencySuffix = locale.currency === undefined ? '' : String(locale.currency[1]);\n  var decimal = locale.decimal === undefined ? '.' : String(locale.decimal);\n  var numerals = locale.numerals === undefined ? identity : formatNumerals(Array.prototype.map.call(locale.numerals, String));\n  var percent = locale.percent === undefined ? '%' : String(locale.percent);\n  var minus = locale.minus === undefined ? \"\\u2212\" : String(locale.minus);\n  var nan = locale.nan === undefined ? 'NaN' : String(locale.nan);\n\n  function newFormat(specifier) {\n    var formatSpecifier = makeFormatSpecifier(specifier);\n    var fill = formatSpecifier.fill;\n    var align = formatSpecifier.align;\n    var sign = formatSpecifier.sign;\n    var symbol = formatSpecifier.symbol;\n    var zero = formatSpecifier.zero;\n    var width = formatSpecifier.width;\n    var comma = formatSpecifier.comma;\n    var precision = formatSpecifier.precision;\n    var trim = formatSpecifier.trim;\n    var type = formatSpecifier.type; // The 'n' type is an alias for ',g'.\n\n    if (type === 'n') {\n      comma = true;\n      type = 'g';\n    } else if (!type || !formatTypes[type]) {\n      // The '' type, and any invalid type, is an alias for '.12~g'.\n      if (precision === undefined) {\n        precision = 12;\n      }\n\n      trim = true;\n      type = 'g';\n    } // If zero fill is specified, padding goes after sign and before digits.\n\n\n    if (zero || fill === '0' && align === '=') {\n      zero = true;\n      fill = '0';\n      align = '=';\n    } // Compute the prefix and suffix.\n    // For SI-prefix, the suffix is lazily computed.\n\n\n    var prefix = symbol === '$' ? currencyPrefix : symbol === '#' && /[boxX]/.test(type) ? '0' + type.toLowerCase() : '';\n    var suffix = symbol === '$' ? currencySuffix : /[%p]/.test(type) ? percent : ''; // What format function should we use?\n    // Is this an integer type?\n    // Can this type generate exponential notation?\n\n    var formatType = formatTypes[type];\n    var maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,\n    // or clamp the specified precision to the supported range.\n    // For significant precision, it must be in [1, 21].\n    // For fixed precision, it must be in [0, 20].\n\n    if (precision === undefined) {\n      precision = 6;\n    } else if (/[gprs]/.test(type)) {\n      precision = Math.max(1, Math.min(21, precision));\n    } else {\n      precision = Math.max(0, Math.min(20, precision));\n    }\n\n    function format(x) {\n      var valuePrefix = prefix;\n      var valueSuffix = suffix;\n      var value;\n\n      if (type === 'c') {\n        valueSuffix = formatType(x) + valueSuffix;\n        value = '';\n      } else {\n        x = +x; // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n\n        var valueNegative = x < 0 || 1 / x < 0; // Perform the initial formatting.\n\n        value = isNaN(x) ? nan : formatType(Math.abs(x), precision); // Trim insignificant zeros.\n\n        if (trim) {\n          value = formatTrim(value);\n        } // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n\n\n        if (valueNegative && +value === 0 && sign !== '+') {\n          valueNegative = false;\n        } // Compute the prefix and suffix.\n\n\n        var signPrefix = valueNegative ? sign === '(' ? sign : minus : sign === '-' || sign === '(' ? '' : sign;\n        var signSuffix = valueNegative && sign === '(' ? ')' : '';\n        valuePrefix = signPrefix + valuePrefix;\n        valueSuffix = (type === 's' ? prefixes[8 + prefixExponent / 3] : '') + valueSuffix + signSuffix; // Break the formatted value into the integer âvalueâ part that can be\n        // grouped, and fractional or exponential âsuffixâ part that is not.\n\n        if (maybeSuffix) {\n          for (var i = 0, n = value.length; i < n; i++) {\n            var c = value.charCodeAt(i);\n\n            if (48 > c || c > 57) {\n              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n              value = value.slice(0, i);\n              break;\n            }\n          }\n        }\n      } // If the fill character is not '0', grouping is applied before padding.\n\n\n      if (comma && !zero) value = group(value, Infinity); // Compute the padding.\n\n      var length = valuePrefix.length + value.length + valueSuffix.length;\n      var padding = length < width ? new Array(width - length + 1).join(fill) : ''; // If the fill character is '0', grouping is applied after padding.\n\n      if (comma && zero) {\n        value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity);\n        padding = '';\n      } // Reconstruct the final output based on the desired alignment.\n\n\n      switch (align) {\n        case '<':\n          value = valuePrefix + value + valueSuffix + padding;\n          break;\n\n        case '=':\n          value = valuePrefix + padding + value + valueSuffix;\n          break;\n\n        case '^':\n          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n          break;\n\n        default:\n          value = padding + valuePrefix + value + valueSuffix;\n          break;\n      }\n\n      var string = formatSpecifier.string;\n\n      if (string) {\n        return string.replace(interpolateRegEx, function () {\n          return numerals(value);\n        });\n      }\n\n      return numerals(value);\n    }\n\n    return format;\n  }\n\n  function formatPrefix(specifier, value) {\n    var formatSpecifier = makeFormatSpecifier(specifier);\n    formatSpecifier.type = 'f';\n    var f = newFormat(formatSpecifier);\n    var e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3;\n    var k = Math.pow(10, -e);\n    var prefix = prefixes[8 + e / 3];\n    return function (value) {\n      return f(k * value) + prefix;\n    };\n  }\n\n  return {\n    format: newFormat,\n    formatPrefix: formatPrefix\n  };\n}","map":{"version":3,"sources":["/Users/julianneagresta/Projects/openlibrary-search-histogram/node_modules/ag-charts-community/dist/es6/util/numberFormat.js"],"names":["tickStep","formatTypes","x","p","toFixed","Math","round","toString","String","formatDecimal","toExponential","toPrecision","formatRounded","formatPrefixAuto","toUpperCase","prefixes","FormatSpecifier","specifier","fill","align","sign","symbol","zero","width","comma","precision","trim","type","string","undefined","formatRegEx","interpolateRegEx","makeFormatSpecifier","found","replace","arguments","match","exec","Error","slice","tickFormat","start","stop","count","step","formatSpecifier","value","max","abs","precisionPrefix","isNaN","formatPrefix","precisionRound","Number","precisionFixed","format","prefixExponent","d","formatDecimalParts","coefficient","exponent","min","floor","i","n","length","Array","join","parts","toLocaleString","formatGroup","grouping","thousands","t","j","g","push","substring","reverse","formatNumerals","numerals","formatTrim","s","i0","i1","NaN","out","sx","indexOf","identity","formatDefaultLocale","defaultLocale","currency","definition","formatLocale","locale","group","prototype","map","call","currencyPrefix","currencySuffix","decimal","percent","minus","nan","newFormat","prefix","test","toLowerCase","suffix","formatType","maybeSuffix","valuePrefix","valueSuffix","valueNegative","signPrefix","signSuffix","c","charCodeAt","Infinity","padding","f","e","k","pow"],"mappings":"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","sourcesContent":["import { tickStep } from './ticks';\nvar formatTypes = {\n    // Multiply by 100, and then decimal notation with a percent sign.\n    '%': function (x, p) { return (x * 100).toFixed(p); },\n    // Binary notation, rounded to integer.\n    'b': function (x) { return Math.round(x).toString(2); },\n    // Converts the integer to the corresponding unicode character before printing.\n    'c': function (x) { return String(x); },\n    // Decimal notation, rounded to integer.\n    'd': formatDecimal,\n    // Exponent notation.\n    'e': function (x, p) { return x.toExponential(p); },\n    // Fixed point notation.\n    'f': function (x, p) { return x.toFixed(p); },\n    // Either decimal or exponent notation, rounded to significant digits.\n    'g': function (x, p) { return x.toPrecision(p); },\n    // Octal notation, rounded to integer.\n    'o': function (x) { return Math.round(x).toString(8); },\n    // Multiply by 100, round to significant digits, and then decimal notation with a percent sign.\n    'p': function (x, p) { return formatRounded(x * 100, p); },\n    // Decimal notation, rounded to significant digits.\n    'r': formatRounded,\n    // Decimal notation with a SI prefix, rounded to significant digits.\n    's': formatPrefixAuto,\n    // Hexadecimal notation, using upper-case letters, rounded to integer.\n    'X': function (x) { return Math.round(x).toString(16).toUpperCase(); },\n    // Hexadecimal notation, using lower-case letters, rounded to integer.\n    'x': function (x) { return Math.round(x).toString(16); }\n};\nvar prefixes = ['y', 'z', 'a', 'f', 'p', 'n', '\\xB5', 'm', '', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y'];\n/**\n * [[fill]align][sign][#][0][width][grouping_option][.precision][type]\n */\nvar FormatSpecifier = /** @class */ (function () {\n    function FormatSpecifier(specifier) {\n        if (specifier instanceof FormatSpecifier) {\n            this.fill = specifier.fill;\n            this.align = specifier.align;\n            this.sign = specifier.sign;\n            this.symbol = specifier.symbol;\n            this.zero = specifier.zero;\n            this.width = specifier.width;\n            this.comma = specifier.comma;\n            this.precision = specifier.precision;\n            this.trim = specifier.trim;\n            this.type = specifier.type;\n            this.string = specifier.string;\n        }\n        else {\n            this.fill = specifier.fill === undefined ? ' ' : String(specifier.fill);\n            this.align = specifier.align === undefined ? '>' : String(specifier.align);\n            this.sign = specifier.sign === undefined ? '-' : String(specifier.sign);\n            this.symbol = specifier.symbol === undefined ? '' : String(specifier.symbol);\n            this.zero = !!specifier.zero;\n            this.width = specifier.width === undefined ? undefined : +specifier.width;\n            this.comma = !!specifier.comma;\n            this.precision = specifier.precision === undefined ? undefined : +specifier.precision;\n            this.trim = !!specifier.trim;\n            this.type = specifier.type === undefined ? '' : String(specifier.type);\n            this.string = specifier.string;\n        }\n    }\n    return FormatSpecifier;\n}());\nexport { FormatSpecifier };\n// [[fill]align][sign][symbol][0][width][,][.precision][~][type]\nvar formatRegEx = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\nvar interpolateRegEx = /(#\\{(.*?)\\})/g;\nexport function makeFormatSpecifier(specifier) {\n    if (specifier instanceof FormatSpecifier) {\n        return new FormatSpecifier(specifier);\n    }\n    var found = false;\n    var string = specifier.replace(interpolateRegEx, function () {\n        if (!found) {\n            specifier = arguments[2];\n            found = true;\n        }\n        return '#{}';\n    });\n    var match = formatRegEx.exec(specifier);\n    if (!match) {\n        throw new Error(\"Invalid format: \" + specifier);\n    }\n    return new FormatSpecifier({\n        fill: match[1],\n        align: match[2],\n        sign: match[3],\n        symbol: match[4],\n        zero: match[5],\n        width: match[6],\n        comma: match[7],\n        precision: match[8] && match[8].slice(1),\n        trim: match[9],\n        type: match[10],\n        string: found ? string : undefined\n    });\n}\nexport function tickFormat(start, stop, count, specifier) {\n    var step = tickStep(start, stop, count);\n    var formatSpecifier = makeFormatSpecifier(specifier == undefined ? ',f' : specifier);\n    switch (formatSpecifier.type) {\n        case 's': {\n            var value = Math.max(Math.abs(start), Math.abs(stop));\n            if (formatSpecifier.precision == null) {\n                var precision = precisionPrefix(step, value);\n                if (!isNaN(precision)) {\n                    formatSpecifier.precision = precision;\n                }\n            }\n            return formatPrefix(formatSpecifier, value);\n        }\n        case '':\n        case 'e':\n        case 'g':\n        case 'p':\n        case 'r': {\n            if (formatSpecifier.precision == null) {\n                var precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop)));\n                if (!isNaN(precision)) {\n                    formatSpecifier.precision = precision - Number(formatSpecifier.type === 'e');\n                }\n            }\n            break;\n        }\n        case 'f':\n        case '%': {\n            if (formatSpecifier.precision == null) {\n                var precision = precisionFixed(step);\n                if (!isNaN(precision)) {\n                    formatSpecifier.precision = precision - Number(formatSpecifier.type === '%') * 2;\n                }\n            }\n            break;\n        }\n    }\n    return format(formatSpecifier);\n}\nvar prefixExponent;\nfunction formatPrefixAuto(x, p) {\n    var d = formatDecimalParts(x, p);\n    if (!d) {\n        return String(x);\n    }\n    var coefficient = d[0];\n    var exponent = d[1];\n    prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3;\n    var i = exponent - prefixExponent + 1;\n    var n = coefficient.length;\n    if (i === n) {\n        return coefficient;\n    }\n    else {\n        if (i > n) {\n            return coefficient + new Array(i - n + 1).join('0');\n        }\n        if (i > 0) {\n            return coefficient.slice(0, i) + '.' + coefficient.slice(i);\n        }\n        else {\n            var parts = formatDecimalParts(x, Math.max(0, p + i - 1));\n            return '0.' + new Array(1 - i).join('0') + parts[0]; // less than 1y!\n        }\n    }\n}\nfunction formatDecimal(x) {\n    return Math.abs(x = Math.round(x)) >= 1e21\n        ? x.toLocaleString('en').replace(/,/g, '')\n        : x.toString(10);\n}\nfunction formatGroup(grouping, thousands) {\n    return function (value, width) {\n        var t = [];\n        var i = value.length;\n        var j = 0;\n        var g = grouping[0];\n        var length = 0;\n        while (i > 0 && g > 0) {\n            if (length + g + 1 > width) {\n                g = Math.max(1, width - length);\n            }\n            t.push(value.substring(i -= g, i + g));\n            if ((length += g + 1) > width) {\n                break;\n            }\n            g = grouping[j = (j + 1) % grouping.length];\n        }\n        return t.reverse().join(thousands);\n    };\n}\nexport function formatNumerals(numerals) {\n    return function (value) { return value.replace(/[0-9]/g, function (i) { return numerals[+i]; }); };\n}\n// Trim insignificant zeros.\nfunction formatTrim(s) {\n    var n = s.length;\n    var i = 1;\n    var i0 = -1;\n    var i1 = NaN;\n    out: for (; i < n; i++) {\n        switch (s[i]) {\n            case '.':\n                i0 = i1 = i;\n                break;\n            case '0':\n                if (i0 === 0) {\n                    i0 = i;\n                    i1 = i;\n                }\n                break;\n            default:\n                if (!+s[i]) {\n                    break out;\n                }\n                if (i0 > 0) {\n                    i0 = 0;\n                    break;\n                }\n        }\n    }\n    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;\n}\nfunction formatRounded(x, p) {\n    var d = formatDecimalParts(x, p);\n    if (!d) {\n        return String(x);\n    }\n    var coefficient = d[0];\n    var exponent = d[1];\n    if (exponent < 0) {\n        return '0.' + new Array(-exponent).join('0') + coefficient;\n    }\n    else {\n        if (coefficient.length > exponent + 1) {\n            return coefficient.slice(0, exponent + 1) + '.' + coefficient.slice(exponent + 1);\n        }\n        else {\n            return coefficient + new Array(exponent - coefficient.length + 2).join('0');\n        }\n    }\n}\n// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimalParts(1.23) returns ['123', 0].\nexport function formatDecimalParts(x, p) {\n    var sx = p ? x.toExponential(p - 1) : x.toExponential();\n    var i = sx.indexOf('e');\n    if (i < 0) { // NaN, Â±Infinity\n        return undefined;\n    }\n    var coefficient = sx.slice(0, i);\n    // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n    // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n    return [\n        coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n        +sx.slice(i + 1)\n    ];\n}\nfunction identity(x) {\n    return x;\n}\nexport var formatDefaultLocale;\nexport var format;\nexport var formatPrefix;\ndefaultLocale({\n    thousands: ',',\n    grouping: [3],\n    currency: ['$', '']\n});\nfunction defaultLocale(definition) {\n    formatDefaultLocale = formatLocale(definition);\n    format = formatDefaultLocale.format;\n    formatPrefix = formatDefaultLocale.formatPrefix;\n}\nfunction exponent(x) {\n    var parts = formatDecimalParts(Math.abs(x));\n    if (parts) {\n        return parts[1];\n    }\n    return NaN;\n}\nfunction precisionFixed(step) {\n    return Math.max(0, -exponent(Math.abs(step)));\n}\nfunction precisionPrefix(step, value) {\n    var x = Math.floor(exponent(value) / 3);\n    x = Math.min(8, x);\n    x = Math.max(-8, x);\n    return Math.max(0, x * 3 - exponent(Math.abs(step)));\n}\nfunction precisionRound(step, max) {\n    step = Math.abs(step);\n    max = Math.abs(max) - step;\n    return Math.max(0, exponent(max) - exponent(step)) + 1;\n}\nexport function formatLocale(locale) {\n    var group = locale.grouping === undefined || locale.thousands === undefined\n        ? identity\n        : formatGroup(Array.prototype.map.call(locale.grouping, Number), String(locale.thousands));\n    var currencyPrefix = locale.currency === undefined ? '' : String(locale.currency[0]);\n    var currencySuffix = locale.currency === undefined ? '' : String(locale.currency[1]);\n    var decimal = locale.decimal === undefined ? '.' : String(locale.decimal);\n    var numerals = locale.numerals === undefined\n        ? identity\n        : formatNumerals(Array.prototype.map.call(locale.numerals, String));\n    var percent = locale.percent === undefined ? '%' : String(locale.percent);\n    var minus = locale.minus === undefined ? '\\u2212' : String(locale.minus);\n    var nan = locale.nan === undefined ? 'NaN' : String(locale.nan);\n    function newFormat(specifier) {\n        var formatSpecifier = makeFormatSpecifier(specifier);\n        var fill = formatSpecifier.fill;\n        var align = formatSpecifier.align;\n        var sign = formatSpecifier.sign;\n        var symbol = formatSpecifier.symbol;\n        var zero = formatSpecifier.zero;\n        var width = formatSpecifier.width;\n        var comma = formatSpecifier.comma;\n        var precision = formatSpecifier.precision;\n        var trim = formatSpecifier.trim;\n        var type = formatSpecifier.type;\n        // The 'n' type is an alias for ',g'.\n        if (type === 'n') {\n            comma = true;\n            type = 'g';\n        }\n        else if (!type || !formatTypes[type]) { // The '' type, and any invalid type, is an alias for '.12~g'.\n            if (precision === undefined) {\n                precision = 12;\n            }\n            trim = true;\n            type = 'g';\n        }\n        // If zero fill is specified, padding goes after sign and before digits.\n        if (zero || (fill === '0' && align === '=')) {\n            zero = true;\n            fill = '0';\n            align = '=';\n        }\n        // Compute the prefix and suffix.\n        // For SI-prefix, the suffix is lazily computed.\n        var prefix = symbol === '$' ? currencyPrefix : symbol === '#' && /[boxX]/.test(type) ? '0' + type.toLowerCase() : '';\n        var suffix = symbol === '$' ? currencySuffix : /[%p]/.test(type) ? percent : '';\n        // What format function should we use?\n        // Is this an integer type?\n        // Can this type generate exponential notation?\n        var formatType = formatTypes[type];\n        var maybeSuffix = /[defgprs%]/.test(type);\n        // Set the default precision if not specified,\n        // or clamp the specified precision to the supported range.\n        // For significant precision, it must be in [1, 21].\n        // For fixed precision, it must be in [0, 20].\n        if (precision === undefined) {\n            precision = 6;\n        }\n        else if (/[gprs]/.test(type)) {\n            precision = Math.max(1, Math.min(21, precision));\n        }\n        else {\n            precision = Math.max(0, Math.min(20, precision));\n        }\n        function format(x) {\n            var valuePrefix = prefix;\n            var valueSuffix = suffix;\n            var value;\n            if (type === 'c') {\n                valueSuffix = formatType(x) + valueSuffix;\n                value = '';\n            }\n            else {\n                x = +x;\n                // Determine the sign. -0 is not less than 0, but 1 / -0 is!\n                var valueNegative = x < 0 || 1 / x < 0;\n                // Perform the initial formatting.\n                value = isNaN(x) ? nan : formatType(Math.abs(x), precision);\n                // Trim insignificant zeros.\n                if (trim) {\n                    value = formatTrim(value);\n                }\n                // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.\n                if (valueNegative && +value === 0 && sign !== '+') {\n                    valueNegative = false;\n                }\n                // Compute the prefix and suffix.\n                var signPrefix = valueNegative\n                    ? (sign === '(' ? sign : minus)\n                    : (sign === '-' || sign === '(' ? '' : sign);\n                var signSuffix = valueNegative && sign === '(' ? ')' : '';\n                valuePrefix = signPrefix + valuePrefix;\n                valueSuffix = (type === 's' ? prefixes[8 + prefixExponent / 3] : '') + valueSuffix + signSuffix;\n                // Break the formatted value into the integer âvalueâ part that can be\n                // grouped, and fractional or exponential âsuffixâ part that is not.\n                if (maybeSuffix) {\n                    for (var i = 0, n = value.length; i < n; i++) {\n                        var c = value.charCodeAt(i);\n                        if (48 > c || c > 57) {\n                            valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;\n                            value = value.slice(0, i);\n                            break;\n                        }\n                    }\n                }\n            }\n            // If the fill character is not '0', grouping is applied before padding.\n            if (comma && !zero)\n                value = group(value, Infinity);\n            // Compute the padding.\n            var length = valuePrefix.length + value.length + valueSuffix.length;\n            var padding = length < width ? new Array(width - length + 1).join(fill) : '';\n            // If the fill character is '0', grouping is applied after padding.\n            if (comma && zero) {\n                value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity);\n                padding = '';\n            }\n            // Reconstruct the final output based on the desired alignment.\n            switch (align) {\n                case '<':\n                    value = valuePrefix + value + valueSuffix + padding;\n                    break;\n                case '=':\n                    value = valuePrefix + padding + value + valueSuffix;\n                    break;\n                case '^':\n                    value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);\n                    break;\n                default:\n                    value = padding + valuePrefix + value + valueSuffix;\n                    break;\n            }\n            var string = formatSpecifier.string;\n            if (string) {\n                return string.replace(interpolateRegEx, function () { return numerals(value); });\n            }\n            return numerals(value);\n        }\n        return format;\n    }\n    function formatPrefix(specifier, value) {\n        var formatSpecifier = makeFormatSpecifier(specifier);\n        formatSpecifier.type = 'f';\n        var f = newFormat(formatSpecifier);\n        var e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3;\n        var k = Math.pow(10, -e);\n        var prefix = prefixes[8 + e / 3];\n        return function (value) {\n            return f(k * value) + prefix;\n        };\n    }\n    return {\n        format: newFormat,\n        formatPrefix: formatPrefix\n    };\n}\n"]},"metadata":{},"sourceType":"module"}