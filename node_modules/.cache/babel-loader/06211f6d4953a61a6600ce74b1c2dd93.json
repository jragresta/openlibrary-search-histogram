{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Group } from \"../../../scene/group\";\nimport { Selection } from \"../../../scene/selection\";\nimport { Rect } from \"../../../scene/shape/rect\";\nimport { Text } from \"../../../scene/shape/text\";\nimport { BandScale } from \"../../../scale/bandScale\";\nimport { SeriesTooltip } from \"../series\";\nimport { Label } from \"../../label\";\nimport { PointerEvents } from \"../../../scene/node\";\nimport { CartesianSeries } from \"./cartesianSeries\";\nimport { ChartAxisDirection, flipChartAxisDirection } from \"../../chartAxis\";\nimport { toTooltipHtml } from \"../../chart\";\nimport { findMinMax } from \"../../../util/array\";\nimport { equal } from \"../../../util/equal\";\nimport { reactive } from \"../../../util/observable\";\nimport { sanitizeHtml } from \"../../../util/sanitize\";\nvar BarSeriesNodeTag;\n\n(function (BarSeriesNodeTag) {\n  BarSeriesNodeTag[BarSeriesNodeTag[\"Bar\"] = 0] = \"Bar\";\n  BarSeriesNodeTag[BarSeriesNodeTag[\"Label\"] = 1] = \"Label\";\n})(BarSeriesNodeTag || (BarSeriesNodeTag = {}));\n\nexport var BarLabelPlacement;\n\n(function (BarLabelPlacement) {\n  BarLabelPlacement[\"Inside\"] = \"inside\";\n  BarLabelPlacement[\"Outside\"] = \"outside\";\n})(BarLabelPlacement || (BarLabelPlacement = {}));\n\nvar BarSeriesLabel = function (_super) {\n  __extends(BarSeriesLabel, _super);\n\n  function BarSeriesLabel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.placement = BarLabelPlacement.Inside;\n    return _this;\n  }\n\n  __decorate([reactive('change')], BarSeriesLabel.prototype, \"formatter\", void 0);\n\n  __decorate([reactive('change')], BarSeriesLabel.prototype, \"placement\", void 0);\n\n  return BarSeriesLabel;\n}(Label);\n\nvar BarSeriesTooltip = function (_super) {\n  __extends(BarSeriesTooltip, _super);\n\n  function BarSeriesTooltip() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([reactive('change')], BarSeriesTooltip.prototype, \"renderer\", void 0);\n\n  return BarSeriesTooltip;\n}(SeriesTooltip);\n\nexport { BarSeriesTooltip };\n\nfunction flat(arr, target) {\n  if (target === void 0) {\n    target = [];\n  }\n\n  arr.forEach(function (v) {\n    if (Array.isArray(v)) {\n      flat(v, target);\n    } else {\n      target.push(v);\n    }\n  });\n  return target;\n}\n\nvar BarSeries = function (_super) {\n  __extends(BarSeries, _super);\n\n  function BarSeries() {\n    var _a;\n\n    var _this = _super.call(this) || this; // Need to put bar and label nodes into separate groups, because even though label nodes are\n    // created after the bar nodes, this only guarantees that labels will always be on top of bars\n    // on the first run. If on the next run more bars are added, they might clip the labels\n    // rendered during the previous run.\n\n\n    _this.rectGroup = _this.pickGroup.appendChild(new Group());\n    _this.labelGroup = _this.group.appendChild(new Group());\n    _this.rectSelection = Selection.select(_this.rectGroup).selectAll();\n    _this.labelSelection = Selection.select(_this.labelGroup).selectAll();\n    _this.xData = [];\n    _this.yData = [];\n    _this.yDomain = [];\n    _this.label = new BarSeriesLabel();\n    /**\n     * The assumption is that the values will be reset (to `true`)\n     * in the {@link yKeys} setter.\n     */\n\n    _this.seriesItemEnabled = new Map();\n    _this.tooltip = new BarSeriesTooltip();\n    _this.flipXY = false;\n    _this.fills = ['#c16068', '#a2bf8a', '#ebcc87', '#80a0c3', '#b58dae', '#85c0d1'];\n    _this.strokes = ['#874349', '#718661', '#a48f5f', '#5a7088', '#7f637a', '#5d8692'];\n    _this.fillOpacity = 1;\n    _this.strokeOpacity = 1;\n    _this.lineDash = undefined;\n    _this.lineDashOffset = 0;\n    /**\n     * Used to get the position of bars within each group.\n     */\n\n    _this.groupScale = new BandScale();\n    _this.directionKeys = (_a = {}, _a[ChartAxisDirection.X] = ['xKey'], _a[ChartAxisDirection.Y] = ['yKeys'], _a);\n    _this._xKey = '';\n    _this._xName = '';\n    _this.cumYKeyCount = [];\n    _this.flatYKeys = undefined; // only set when a user used a flat array for yKeys\n\n    _this.hideInLegend = [];\n    /**\n     * yKeys: [['coffee']] - regular bars, each category has a single bar that shows a value for coffee\n     * yKeys: [['coffee'], ['tea'], ['milk']] - each category has three bars that show values for coffee, tea and milk\n     * yKeys: [['coffee', 'tea', 'milk']] - each category has a single bar with three stacks that show values for coffee, tea and milk\n     * yKeys: [['coffee', 'tea', 'milk'], ['paper', 'ink']] - each category has 2 stacked bars,\n     *     first showing values for coffee, tea and milk and second values for paper and ink\n     */\n\n    _this._yKeys = [];\n    _this._grouped = false;\n    /**\n     * A map of `yKeys` to their names (used in legends and tooltips).\n     * For example, if a key is `product_name` it's name can be a more presentable `Product Name`.\n     */\n\n    _this._yNames = {};\n    _this._strokeWidth = 1;\n\n    _this.addEventListener('update', _this.update);\n\n    _this.label.enabled = false;\n\n    _this.label.addEventListener('change', _this.update, _this);\n\n    return _this;\n  }\n\n  BarSeries.prototype.getKeys = function (direction) {\n    var _this = this;\n\n    var directionKeys = this.directionKeys;\n    var keys = directionKeys && directionKeys[this.flipXY ? flipChartAxisDirection(direction) : direction];\n    var values = [];\n\n    if (keys) {\n      keys.forEach(function (key) {\n        var value = _this[key];\n\n        if (value) {\n          if (Array.isArray(value)) {\n            values = values.concat(flat(value));\n          } else {\n            values.push(value);\n          }\n        }\n      });\n    }\n\n    return values;\n  };\n\n  Object.defineProperty(BarSeries.prototype, \"xKey\", {\n    get: function get() {\n      return this._xKey;\n    },\n    set: function set(value) {\n      if (this._xKey !== value) {\n        this._xKey = value;\n        this.xData = [];\n        this.scheduleData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BarSeries.prototype, \"xName\", {\n    get: function get() {\n      return this._xName;\n    },\n    set: function set(value) {\n      if (this._xName !== value) {\n        this._xName = value;\n        this.update();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BarSeries.prototype, \"yKeys\", {\n    get: function get() {\n      return this._yKeys;\n    },\n    set: function set(yKeys) {\n      var _this = this;\n\n      var flatYKeys = undefined; // Convert from flat y-keys to grouped y-keys.\n\n      if (yKeys.length && !Array.isArray(yKeys[0])) {\n        flatYKeys = yKeys;\n\n        if (this.grouped) {\n          yKeys = flatYKeys.map(function (k) {\n            return [k];\n          });\n        } else {\n          yKeys = [flatYKeys];\n        }\n      }\n\n      if (!equal(this._yKeys, yKeys)) {\n        if (flatYKeys) {\n          this.flatYKeys = flatYKeys;\n        } else {\n          this.flatYKeys = undefined;\n        }\n\n        this._yKeys = yKeys;\n        var prevYKeyCount_1 = 0;\n        this.cumYKeyCount = [];\n        var visibleStacks_1 = [];\n        yKeys.forEach(function (stack, index) {\n          if (stack.length > 0) {\n            visibleStacks_1.push(String(index));\n          }\n\n          _this.cumYKeyCount.push(prevYKeyCount_1);\n\n          prevYKeyCount_1 += stack.length;\n        });\n        this.yData = [];\n        var seriesItemEnabled_1 = this.seriesItemEnabled;\n        seriesItemEnabled_1.clear();\n        yKeys.forEach(function (stack) {\n          stack.forEach(function (yKey) {\n            return seriesItemEnabled_1.set(yKey, true);\n          });\n        });\n        var groupScale = this.groupScale;\n        groupScale.domain = visibleStacks_1;\n        groupScale.padding = 0.1;\n        groupScale.round = true;\n        this.scheduleData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BarSeries.prototype, \"grouped\", {\n    get: function get() {\n      return this._grouped;\n    },\n    set: function set(value) {\n      if (this._grouped !== value) {\n        this._grouped = value;\n\n        if (this.flatYKeys) {\n          this.yKeys = this.flatYKeys;\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BarSeries.prototype, \"yNames\", {\n    get: function get() {\n      return this._yNames;\n    },\n    set: function set(values) {\n      if (Array.isArray(values) && this.flatYKeys) {\n        var map_1 = {};\n        this.flatYKeys.forEach(function (k, i) {\n          map_1[k] = values[i];\n        });\n        values = map_1;\n      }\n\n      this._yNames = values;\n      this.scheduleData();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BarSeries.prototype.setColors = function (fills, strokes) {\n    this.fills = fills;\n    this.strokes = strokes;\n  };\n\n  Object.defineProperty(BarSeries.prototype, \"normalizedTo\", {\n    get: function get() {\n      return this._normalizedTo;\n    },\n    set: function set(value) {\n      var absValue = value ? Math.abs(value) : undefined;\n\n      if (this._normalizedTo !== absValue) {\n        this._normalizedTo = absValue;\n        this.scheduleData();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BarSeries.prototype, \"strokeWidth\", {\n    get: function get() {\n      return this._strokeWidth;\n    },\n    set: function set(value) {\n      if (this._strokeWidth !== value) {\n        this._strokeWidth = value;\n        this.update();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(BarSeries.prototype, \"shadow\", {\n    get: function get() {\n      return this._shadow;\n    },\n    set: function set(value) {\n      if (this._shadow !== value) {\n        this._shadow = value;\n        this.update();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  BarSeries.prototype.onHighlightChange = function () {\n    this.updateRectNodes();\n  };\n\n  BarSeries.prototype.processData = function () {\n    var _a = this,\n        xKey = _a.xKey,\n        yKeys = _a.yKeys,\n        seriesItemEnabled = _a.seriesItemEnabled;\n\n    var data = xKey && yKeys.length && this.data ? this.data : [];\n    var keysFound = true; // only warn once\n\n    this.xData = data.map(function (datum) {\n      if (keysFound && !(xKey in datum)) {\n        keysFound = false;\n        console.warn(\"The key '\" + xKey + \"' was not found in the data: \", datum);\n      }\n\n      return datum[xKey];\n    });\n    this.yData = data.map(function (datum) {\n      return yKeys.map(function (stack) {\n        return stack.map(function (yKey) {\n          if (keysFound && !(yKey in datum)) {\n            keysFound = false;\n            console.warn(\"The key '\" + yKey + \"' was not found in the data: \", datum);\n          }\n\n          var value = datum[yKey];\n          return isFinite(value) && seriesItemEnabled.get(yKey) ? value : 0;\n        });\n      });\n    }); // Used for normalization of stacked bars. Contains min/max values for each stack in each group,\n    // where min is zero and max is a positive total of all values in the stack\n    // or min is a negative total of all values in the stack and max is zero.\n\n    var yMinMax = this.yData.map(function (group) {\n      return group.map(function (stack) {\n        return findMinMax(stack);\n      });\n    });\n\n    var _b = this,\n        yData = _b.yData,\n        normalizedTo = _b.normalizedTo;\n\n    var yLargestMinMax = this.findLargestMinMax(yMinMax);\n    var yMin;\n    var yMax;\n\n    if (normalizedTo && isFinite(normalizedTo)) {\n      yMin = yLargestMinMax.min < 0 ? -normalizedTo : 0;\n      yMax = normalizedTo;\n      yData.forEach(function (group, i) {\n        group.forEach(function (stack, j) {\n          stack.forEach(function (y, k) {\n            if (y < 0) {\n              stack[k] = -y / yMinMax[i][j].min * normalizedTo;\n            } else {\n              stack[k] = y / yMinMax[i][j].max * normalizedTo;\n            }\n          });\n        });\n      });\n    } else {\n      yMin = yLargestMinMax.min;\n      yMax = yLargestMinMax.max;\n    }\n\n    this.yDomain = this.fixNumericExtent([yMin, yMax], 'y');\n    this.fireEvent({\n      type: 'dataProcessed'\n    });\n    return true;\n  };\n\n  BarSeries.prototype.findLargestMinMax = function (groups) {\n    var tallestStackMin = 0;\n    var tallestStackMax = 0;\n\n    for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {\n      var group = groups_1[_i];\n\n      for (var _a = 0, group_1 = group; _a < group_1.length; _a++) {\n        var stack = group_1[_a];\n\n        if (stack.min < tallestStackMin) {\n          tallestStackMin = stack.min;\n        }\n\n        if (stack.max > tallestStackMax) {\n          tallestStackMax = stack.max;\n        }\n      }\n    }\n\n    return {\n      min: tallestStackMin,\n      max: tallestStackMax\n    };\n  };\n\n  BarSeries.prototype.getDomain = function (direction) {\n    if (this.flipXY) {\n      direction = flipChartAxisDirection(direction);\n    }\n\n    if (direction === ChartAxisDirection.X) {\n      return this.xData;\n    } else {\n      return this.yDomain;\n    }\n  };\n\n  BarSeries.prototype.fireNodeClickEvent = function (event, datum) {\n    this.fireEvent({\n      type: 'nodeClick',\n      event: event,\n      series: this,\n      datum: datum.seriesDatum,\n      xKey: this.xKey,\n      yKey: datum.yKey\n    });\n  };\n\n  BarSeries.prototype.getCategoryAxis = function () {\n    return this.flipXY ? this.yAxis : this.xAxis;\n  };\n\n  BarSeries.prototype.getValueAxis = function () {\n    return this.flipXY ? this.xAxis : this.yAxis;\n  };\n\n  BarSeries.prototype.highlight = function (itemId) {\n    _super.prototype.highlight.call(this, itemId);\n\n    this.highlightedItemId = itemId;\n    this.updateRectNodes();\n  };\n\n  BarSeries.prototype.dehighlight = function () {\n    this.highlightedItemId = undefined;\n    this.updateRectNodes();\n  };\n\n  BarSeries.prototype.undim = function (itemId) {\n    this.updateDim(itemId);\n  };\n\n  BarSeries.prototype.dim = function () {\n    this.updateDim();\n  };\n\n  BarSeries.prototype.updateDim = function (itemId) {\n    var dimOpacity = this.highlightStyle.series.dimOpacity;\n\n    var fn = function fn(node, datum) {\n      return node.opacity = !itemId || itemId === datum.itemId ? 1 : dimOpacity;\n    };\n\n    this.rectSelection.each(fn);\n    this.labelSelection.each(fn);\n  };\n\n  BarSeries.prototype.generateNodeData = function () {\n    var _this = this;\n\n    if (!this.data) {\n      return [];\n    }\n\n    var flipXY = this.flipXY;\n    var xAxis = this.getCategoryAxis();\n    var yAxis = this.getValueAxis();\n    var xScale = xAxis.scale;\n    var yScale = yAxis.scale;\n\n    var _a = this,\n        groupScale = _a.groupScale,\n        yKeys = _a.yKeys,\n        cumYKeyCount = _a.cumYKeyCount,\n        fills = _a.fills,\n        strokes = _a.strokes,\n        strokeWidth = _a.strokeWidth,\n        seriesItemEnabled = _a.seriesItemEnabled,\n        data = _a.data,\n        xData = _a.xData,\n        yData = _a.yData,\n        label = _a.label;\n\n    var labelFontStyle = label.fontStyle;\n    var labelFontWeight = label.fontWeight;\n    var labelFontSize = label.fontSize;\n    var labelFontFamily = label.fontFamily;\n    var labelColor = label.color;\n    var labelFormatter = label.formatter;\n    var labelPlacement = label.placement;\n    groupScale.range = [0, xScale.bandwidth];\n    var grouped = true;\n    var barWidth = grouped ? groupScale.bandwidth : xScale.bandwidth;\n    var nodeData = [];\n    xData.forEach(function (group, groupIndex) {\n      var seriesDatum = data[groupIndex];\n      var x = xScale.convert(group);\n      var groupYs = yData[groupIndex]; // y-data for groups of stacks\n\n      for (var stackIndex = 0; stackIndex < groupYs.length; stackIndex++) {\n        var stackYs = groupYs[stackIndex]; // y-data for a stack withing a group\n\n        var prevMinY = 0;\n        var prevMaxY = 0;\n\n        for (var levelIndex = 0; levelIndex < stackYs.length; levelIndex++) {\n          var currY = stackYs[levelIndex];\n          var yKey = yKeys[stackIndex][levelIndex];\n          var barX = grouped ? x + groupScale.convert(String(stackIndex)) : x; // Bars outside of visible range are not rendered, so we generate node data\n          // only for the visible subset of user data.\n\n          if (!xAxis.inRange(barX, barWidth)) {\n            continue;\n          }\n\n          var prevY = currY < 0 ? prevMinY : prevMaxY;\n          var y = yScale.convert(prevY + currY);\n          var bottomY = yScale.convert(prevY);\n          var yValue = seriesDatum[yKey]; // unprocessed y-value\n\n          var yValueIsNumber = typeof yValue === 'number';\n          var labelText = void 0;\n\n          if (labelFormatter) {\n            labelText = labelFormatter({\n              value: yValueIsNumber ? yValue : undefined\n            });\n          } else {\n            labelText = yValueIsNumber && isFinite(yValue) ? yValue.toFixed(2) : '';\n          }\n\n          var labelX = void 0;\n          var labelY = void 0;\n\n          if (flipXY) {\n            labelY = barX + barWidth / 2;\n\n            if (labelPlacement === BarLabelPlacement.Inside) {\n              labelX = y + (yValue >= 0 ? -1 : 1) * Math.abs(bottomY - y) / 2;\n            } else {\n              labelX = y + (yValue >= 0 ? 1 : -1) * 4;\n            }\n          } else {\n            labelX = barX + barWidth / 2;\n\n            if (labelPlacement === BarLabelPlacement.Inside) {\n              labelY = y + (yValue >= 0 ? 1 : -1) * Math.abs(bottomY - y) / 2;\n            } else {\n              labelY = y + (yValue >= 0 ? -3 : 4);\n            }\n          }\n\n          var labelTextAlign = void 0;\n          var labelTextBaseline = void 0;\n\n          if (labelPlacement === BarLabelPlacement.Inside) {\n            labelTextAlign = 'center';\n            labelTextBaseline = 'middle';\n          } else {\n            labelTextAlign = flipXY ? yValue >= 0 ? 'start' : 'end' : 'center';\n            labelTextBaseline = flipXY ? 'middle' : yValue >= 0 ? 'bottom' : 'top';\n          }\n\n          var colorIndex = cumYKeyCount[stackIndex] + levelIndex;\n          nodeData.push({\n            index: groupIndex,\n            series: _this,\n            itemId: yKey,\n            seriesDatum: seriesDatum,\n            yValue: yValue,\n            yKey: yKey,\n            x: flipXY ? Math.min(y, bottomY) : barX,\n            y: flipXY ? barX : Math.min(y, bottomY),\n            width: flipXY ? Math.abs(bottomY - y) : barWidth,\n            height: flipXY ? barWidth : Math.abs(bottomY - y),\n            fill: fills[colorIndex % fills.length],\n            stroke: strokes[colorIndex % strokes.length],\n            strokeWidth: strokeWidth,\n            label: seriesItemEnabled.get(yKey) && labelText ? {\n              text: labelText,\n              fontStyle: labelFontStyle,\n              fontWeight: labelFontWeight,\n              fontSize: labelFontSize,\n              fontFamily: labelFontFamily,\n              textAlign: labelTextAlign,\n              textBaseline: labelTextBaseline,\n              fill: labelColor,\n              x: labelX,\n              y: labelY\n            } : undefined\n          });\n\n          if (currY < 0) {\n            prevMinY += currY;\n          } else {\n            prevMaxY += currY;\n          }\n        }\n      }\n    });\n    return nodeData;\n  };\n\n  BarSeries.prototype.update = function () {\n    var _a = this,\n        visible = _a.visible,\n        chart = _a.chart,\n        xAxis = _a.xAxis,\n        yAxis = _a.yAxis,\n        xData = _a.xData,\n        yData = _a.yData;\n\n    this.group.visible = visible;\n\n    if (!chart || chart.layoutPending || chart.dataPending || !xAxis || !yAxis || !visible || !xData.length || !yData.length) {\n      return;\n    }\n\n    var nodeData = this.generateNodeData();\n    this.updateRectSelection(nodeData);\n    this.updateRectNodes();\n    this.updateLabelSelection(nodeData);\n    this.updateLabelNodes();\n  };\n\n  BarSeries.prototype.updateRectSelection = function (selectionData) {\n    var updateRects = this.rectSelection.setData(selectionData);\n    updateRects.exit.remove();\n    var enterRects = updateRects.enter.append(Rect).each(function (rect) {\n      rect.tag = BarSeriesNodeTag.Bar;\n      rect.crisp = true;\n    });\n    this.rectSelection = updateRects.merge(enterRects);\n  };\n\n  BarSeries.prototype.updateRectNodes = function () {\n    var _this = this;\n\n    if (!this.chart) {\n      return;\n    }\n\n    var _a = this,\n        fillOpacity = _a.fillOpacity,\n        strokeOpacity = _a.strokeOpacity,\n        shadow = _a.shadow,\n        formatter = _a.formatter,\n        xKey = _a.xKey,\n        flipXY = _a.flipXY,\n        highlightedDatum = _a.chart.highlightedDatum,\n        highlightedItemId = _a.highlightedItemId,\n        _b = _a.highlightStyle,\n        fill = _b.fill,\n        stroke = _b.stroke,\n        highlightedDatumStrokeWidth = _b.strokeWidth,\n        _c = _b.series,\n        subSeriesHighlightingEnabled = _c.enabled,\n        highlightedSubSeriesStrokeWidth = _c.strokeWidth;\n\n    this.rectSelection.each(function (rect, datum) {\n      var isDatumHighlighted = datum === highlightedDatum;\n      var isSubSeriesHighlighted = highlightedItemId === datum.itemId;\n      var rectFill = isDatumHighlighted && fill !== undefined ? fill : datum.fill;\n      var rectStroke = isDatumHighlighted && stroke !== undefined ? stroke : datum.stroke;\n      var format = undefined;\n      var strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== undefined ? highlightedDatumStrokeWidth : subSeriesHighlightingEnabled && isSubSeriesHighlighted && highlightedSubSeriesStrokeWidth !== undefined ? highlightedSubSeriesStrokeWidth : datum.strokeWidth;\n\n      if (formatter) {\n        format = formatter({\n          datum: datum.seriesDatum,\n          fill: rectFill,\n          stroke: rectStroke,\n          strokeWidth: strokeWidth,\n          highlighted: isDatumHighlighted,\n          xKey: xKey,\n          yKey: datum.yKey\n        });\n      }\n\n      rect.x = datum.x;\n      rect.y = datum.y;\n      rect.width = datum.width;\n      rect.height = datum.height;\n      rect.fill = format && format.fill || rectFill;\n      rect.stroke = format && format.stroke || rectStroke;\n      rect.strokeWidth = format && format.strokeWidth !== undefined ? format.strokeWidth : strokeWidth;\n      rect.fillOpacity = fillOpacity;\n      rect.strokeOpacity = strokeOpacity;\n      rect.lineDash = _this.lineDash;\n      rect.lineDashOffset = _this.lineDashOffset;\n      rect.fillShadow = shadow; // Prevent stroke from rendering for zero height columns and zero width bars.\n\n      rect.visible = flipXY ? datum.width > 0 : datum.height > 0;\n    });\n  };\n\n  BarSeries.prototype.updateLabelSelection = function (selectionData) {\n    var updateLabels = this.labelSelection.setData(selectionData);\n    updateLabels.exit.remove();\n    var enterLabels = updateLabels.enter.append(Text).each(function (text) {\n      text.tag = BarSeriesNodeTag.Label;\n      text.pointerEvents = PointerEvents.None;\n    });\n    this.labelSelection = updateLabels.merge(enterLabels);\n  };\n\n  BarSeries.prototype.updateLabelNodes = function () {\n    var labelEnabled = this.label.enabled;\n    this.labelSelection.each(function (text, datum) {\n      var label = datum.label;\n\n      if (label && labelEnabled) {\n        text.fontStyle = label.fontStyle;\n        text.fontWeight = label.fontWeight;\n        text.fontSize = label.fontSize;\n        text.fontFamily = label.fontFamily;\n        text.textAlign = label.textAlign;\n        text.textBaseline = label.textBaseline;\n        text.text = label.text;\n        text.x = label.x;\n        text.y = label.y;\n        text.fill = label.fill;\n        text.visible = true;\n      } else {\n        text.visible = false;\n      }\n    });\n  };\n\n  BarSeries.prototype.getTooltipHtml = function (nodeDatum) {\n    var _a = this,\n        xKey = _a.xKey,\n        yKeys = _a.yKeys,\n        yData = _a.yData;\n\n    var xAxis = this.getCategoryAxis();\n    var yAxis = this.getValueAxis();\n    var yKey = nodeDatum.yKey;\n\n    if (!xKey || !yKey || !yData.length) {\n      return '';\n    }\n\n    var yGroup = yData[nodeDatum.index];\n    var fillIndex = 0;\n    var i = 0;\n    var j = 0;\n\n    for (; j < yKeys.length; j++) {\n      var stack = yKeys[j];\n      i = stack.indexOf(yKey);\n\n      if (i >= 0) {\n        fillIndex += i;\n        break;\n      }\n\n      fillIndex += stack.length;\n    }\n\n    var _b = this,\n        xName = _b.xName,\n        yNames = _b.yNames,\n        fills = _b.fills,\n        tooltip = _b.tooltip;\n\n    var tooltipRenderer = tooltip.renderer;\n    var datum = nodeDatum.seriesDatum;\n    var yName = yNames[yKey];\n    var color = fills[fillIndex % fills.length];\n    var xValue = datum[xKey];\n    var yValue = datum[yKey];\n    var processedYValue = yGroup[j][i];\n    var xString = sanitizeHtml(xAxis.formatDatum(xValue));\n    var yString = sanitizeHtml(yAxis.formatDatum(yValue));\n    var title = sanitizeHtml(yName);\n    var content = xString + ': ' + yString;\n    var defaults = {\n      title: title,\n      backgroundColor: color,\n      content: content\n    };\n\n    if (tooltipRenderer) {\n      return toTooltipHtml(tooltipRenderer({\n        datum: datum,\n        xKey: xKey,\n        xValue: xValue,\n        xName: xName,\n        yKey: yKey,\n        yValue: yValue,\n        processedYValue: processedYValue,\n        yName: yName,\n        color: color\n      }), defaults);\n    }\n\n    return toTooltipHtml(defaults);\n  };\n\n  BarSeries.prototype.listSeriesItems = function (legendData) {\n    var _a = this,\n        id = _a.id,\n        data = _a.data,\n        xKey = _a.xKey,\n        yKeys = _a.yKeys,\n        yNames = _a.yNames,\n        cumYKeyCount = _a.cumYKeyCount,\n        seriesItemEnabled = _a.seriesItemEnabled,\n        hideInLegend = _a.hideInLegend,\n        fills = _a.fills,\n        strokes = _a.strokes,\n        fillOpacity = _a.fillOpacity,\n        strokeOpacity = _a.strokeOpacity;\n\n    if (data && data.length && xKey && yKeys.length) {\n      this.yKeys.forEach(function (stack, stackIndex) {\n        stack.forEach(function (yKey, levelIndex) {\n          if (hideInLegend.indexOf(yKey) < 0) {\n            var colorIndex = cumYKeyCount[stackIndex] + levelIndex;\n            legendData.push({\n              id: id,\n              itemId: yKey,\n              enabled: seriesItemEnabled.get(yKey) || false,\n              label: {\n                text: yNames[yKey] || yKey\n              },\n              marker: {\n                fill: fills[colorIndex % fills.length],\n                stroke: strokes[colorIndex % strokes.length],\n                fillOpacity: fillOpacity,\n                strokeOpacity: strokeOpacity\n              }\n            });\n          }\n        });\n      });\n    }\n  };\n\n  BarSeries.prototype.toggleSeriesItem = function (itemId, enabled) {\n    var seriesItemEnabled = this.seriesItemEnabled;\n    seriesItemEnabled.set(itemId, enabled);\n    var yKeys = this.yKeys.map(function (stack) {\n      return stack.slice();\n    }); // deep clone\n\n    seriesItemEnabled.forEach(function (enabled, yKey) {\n      if (!enabled) {\n        yKeys.forEach(function (stack) {\n          var index = stack.indexOf(yKey);\n\n          if (index >= 0) {\n            stack.splice(index, 1);\n          }\n        });\n      }\n    });\n    var visibleStacks = [];\n    yKeys.forEach(function (stack, index) {\n      if (stack.length > 0) {\n        visibleStacks.push(String(index));\n      }\n    });\n    this.groupScale.domain = visibleStacks;\n    this.scheduleData();\n  };\n\n  BarSeries.className = 'BarSeries';\n  BarSeries.type = 'bar';\n\n  __decorate([reactive('dataChange')], BarSeries.prototype, \"flipXY\", void 0);\n\n  __decorate([reactive('dataChange')], BarSeries.prototype, \"fills\", void 0);\n\n  __decorate([reactive('dataChange')], BarSeries.prototype, \"strokes\", void 0);\n\n  __decorate([reactive('layoutChange')], BarSeries.prototype, \"fillOpacity\", void 0);\n\n  __decorate([reactive('layoutChange')], BarSeries.prototype, \"strokeOpacity\", void 0);\n\n  __decorate([reactive('update')], BarSeries.prototype, \"lineDash\", void 0);\n\n  __decorate([reactive('update')], BarSeries.prototype, \"lineDashOffset\", void 0);\n\n  __decorate([reactive('update')], BarSeries.prototype, \"formatter\", void 0);\n\n  __decorate([reactive('layoutChange')], BarSeries.prototype, \"hideInLegend\", void 0);\n\n  return BarSeries;\n}(CartesianSeries);\n\nexport { BarSeries };","map":{"version":3,"sources":["/Users/julianneagresta/Projects/openlibrary-search-histogram/node_modules/ag-charts-community/dist/es6/chart/series/cartesian/barSeries.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Group","Selection","Rect","Text","BandScale","SeriesTooltip","Label","PointerEvents","CartesianSeries","ChartAxisDirection","flipChartAxisDirection","toTooltipHtml","findMinMax","equal","reactive","sanitizeHtml","BarSeriesNodeTag","BarLabelPlacement","BarSeriesLabel","_super","_this","apply","placement","Inside","BarSeriesTooltip","flat","arr","forEach","v","isArray","push","BarSeries","_a","call","rectGroup","pickGroup","appendChild","labelGroup","group","rectSelection","select","selectAll","labelSelection","xData","yData","yDomain","label","seriesItemEnabled","Map","tooltip","flipXY","fills","strokes","fillOpacity","strokeOpacity","lineDash","undefined","lineDashOffset","groupScale","directionKeys","X","Y","_xKey","_xName","cumYKeyCount","flatYKeys","hideInLegend","_yKeys","_grouped","_yNames","_strokeWidth","addEventListener","update","enabled","getKeys","direction","keys","values","value","concat","get","set","scheduleData","enumerable","configurable","yKeys","grouped","map","k","prevYKeyCount_1","visibleStacks_1","stack","index","String","seriesItemEnabled_1","clear","yKey","domain","padding","round","map_1","setColors","_normalizedTo","absValue","Math","abs","_shadow","onHighlightChange","updateRectNodes","processData","xKey","data","keysFound","datum","console","warn","isFinite","yMinMax","_b","normalizedTo","yLargestMinMax","findLargestMinMax","yMin","yMax","min","j","y","max","fixNumericExtent","fireEvent","type","groups","tallestStackMin","tallestStackMax","_i","groups_1","group_1","getDomain","fireNodeClickEvent","event","series","seriesDatum","getCategoryAxis","yAxis","xAxis","getValueAxis","highlight","itemId","highlightedItemId","dehighlight","undim","updateDim","dim","dimOpacity","highlightStyle","fn","node","opacity","each","generateNodeData","xScale","scale","yScale","strokeWidth","labelFontStyle","fontStyle","labelFontWeight","fontWeight","labelFontSize","fontSize","labelFontFamily","fontFamily","labelColor","color","labelFormatter","formatter","labelPlacement","range","bandwidth","barWidth","nodeData","groupIndex","x","convert","groupYs","stackIndex","stackYs","prevMinY","prevMaxY","levelIndex","currY","barX","inRange","prevY","bottomY","yValue","yValueIsNumber","labelText","toFixed","labelX","labelY","labelTextAlign","labelTextBaseline","colorIndex","width","height","fill","stroke","text","textAlign","textBaseline","visible","chart","layoutPending","dataPending","updateRectSelection","updateLabelSelection","updateLabelNodes","selectionData","updateRects","setData","exit","remove","enterRects","enter","append","rect","tag","Bar","crisp","merge","shadow","highlightedDatum","highlightedDatumStrokeWidth","_c","subSeriesHighlightingEnabled","highlightedSubSeriesStrokeWidth","isDatumHighlighted","isSubSeriesHighlighted","rectFill","rectStroke","format","highlighted","fillShadow","updateLabels","enterLabels","pointerEvents","None","labelEnabled","getTooltipHtml","nodeDatum","yGroup","fillIndex","indexOf","xName","yNames","tooltipRenderer","renderer","yName","xValue","processedYValue","xString","formatDatum","yString","title","content","defaults","backgroundColor","listSeriesItems","legendData","id","marker","toggleSeriesItem","slice","splice","visibleStacks","className"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Group } from \"../../../scene/group\";\nimport { Selection } from \"../../../scene/selection\";\nimport { Rect } from \"../../../scene/shape/rect\";\nimport { Text } from \"../../../scene/shape/text\";\nimport { BandScale } from \"../../../scale/bandScale\";\nimport { SeriesTooltip } from \"../series\";\nimport { Label } from \"../../label\";\nimport { PointerEvents } from \"../../../scene/node\";\nimport { CartesianSeries } from \"./cartesianSeries\";\nimport { ChartAxisDirection, flipChartAxisDirection } from \"../../chartAxis\";\nimport { toTooltipHtml } from \"../../chart\";\nimport { findMinMax } from \"../../../util/array\";\nimport { equal } from \"../../../util/equal\";\nimport { reactive } from \"../../../util/observable\";\nimport { sanitizeHtml } from \"../../../util/sanitize\";\nvar BarSeriesNodeTag;\n(function (BarSeriesNodeTag) {\n    BarSeriesNodeTag[BarSeriesNodeTag[\"Bar\"] = 0] = \"Bar\";\n    BarSeriesNodeTag[BarSeriesNodeTag[\"Label\"] = 1] = \"Label\";\n})(BarSeriesNodeTag || (BarSeriesNodeTag = {}));\nexport var BarLabelPlacement;\n(function (BarLabelPlacement) {\n    BarLabelPlacement[\"Inside\"] = \"inside\";\n    BarLabelPlacement[\"Outside\"] = \"outside\";\n})(BarLabelPlacement || (BarLabelPlacement = {}));\nvar BarSeriesLabel = /** @class */ (function (_super) {\n    __extends(BarSeriesLabel, _super);\n    function BarSeriesLabel() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.placement = BarLabelPlacement.Inside;\n        return _this;\n    }\n    __decorate([\n        reactive('change')\n    ], BarSeriesLabel.prototype, \"formatter\", void 0);\n    __decorate([\n        reactive('change')\n    ], BarSeriesLabel.prototype, \"placement\", void 0);\n    return BarSeriesLabel;\n}(Label));\nvar BarSeriesTooltip = /** @class */ (function (_super) {\n    __extends(BarSeriesTooltip, _super);\n    function BarSeriesTooltip() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        reactive('change')\n    ], BarSeriesTooltip.prototype, \"renderer\", void 0);\n    return BarSeriesTooltip;\n}(SeriesTooltip));\nexport { BarSeriesTooltip };\nfunction flat(arr, target) {\n    if (target === void 0) { target = []; }\n    arr.forEach(function (v) {\n        if (Array.isArray(v)) {\n            flat(v, target);\n        }\n        else {\n            target.push(v);\n        }\n    });\n    return target;\n}\nvar BarSeries = /** @class */ (function (_super) {\n    __extends(BarSeries, _super);\n    function BarSeries() {\n        var _a;\n        var _this = _super.call(this) || this;\n        // Need to put bar and label nodes into separate groups, because even though label nodes are\n        // created after the bar nodes, this only guarantees that labels will always be on top of bars\n        // on the first run. If on the next run more bars are added, they might clip the labels\n        // rendered during the previous run.\n        _this.rectGroup = _this.pickGroup.appendChild(new Group);\n        _this.labelGroup = _this.group.appendChild(new Group);\n        _this.rectSelection = Selection.select(_this.rectGroup).selectAll();\n        _this.labelSelection = Selection.select(_this.labelGroup).selectAll();\n        _this.xData = [];\n        _this.yData = [];\n        _this.yDomain = [];\n        _this.label = new BarSeriesLabel();\n        /**\n         * The assumption is that the values will be reset (to `true`)\n         * in the {@link yKeys} setter.\n         */\n        _this.seriesItemEnabled = new Map();\n        _this.tooltip = new BarSeriesTooltip();\n        _this.flipXY = false;\n        _this.fills = [\n            '#c16068',\n            '#a2bf8a',\n            '#ebcc87',\n            '#80a0c3',\n            '#b58dae',\n            '#85c0d1'\n        ];\n        _this.strokes = [\n            '#874349',\n            '#718661',\n            '#a48f5f',\n            '#5a7088',\n            '#7f637a',\n            '#5d8692'\n        ];\n        _this.fillOpacity = 1;\n        _this.strokeOpacity = 1;\n        _this.lineDash = undefined;\n        _this.lineDashOffset = 0;\n        /**\n         * Used to get the position of bars within each group.\n         */\n        _this.groupScale = new BandScale();\n        _this.directionKeys = (_a = {},\n            _a[ChartAxisDirection.X] = ['xKey'],\n            _a[ChartAxisDirection.Y] = ['yKeys'],\n            _a);\n        _this._xKey = '';\n        _this._xName = '';\n        _this.cumYKeyCount = [];\n        _this.flatYKeys = undefined; // only set when a user used a flat array for yKeys\n        _this.hideInLegend = [];\n        /**\n         * yKeys: [['coffee']] - regular bars, each category has a single bar that shows a value for coffee\n         * yKeys: [['coffee'], ['tea'], ['milk']] - each category has three bars that show values for coffee, tea and milk\n         * yKeys: [['coffee', 'tea', 'milk']] - each category has a single bar with three stacks that show values for coffee, tea and milk\n         * yKeys: [['coffee', 'tea', 'milk'], ['paper', 'ink']] - each category has 2 stacked bars,\n         *     first showing values for coffee, tea and milk and second values for paper and ink\n         */\n        _this._yKeys = [];\n        _this._grouped = false;\n        /**\n         * A map of `yKeys` to their names (used in legends and tooltips).\n         * For example, if a key is `product_name` it's name can be a more presentable `Product Name`.\n         */\n        _this._yNames = {};\n        _this._strokeWidth = 1;\n        _this.addEventListener('update', _this.update);\n        _this.label.enabled = false;\n        _this.label.addEventListener('change', _this.update, _this);\n        return _this;\n    }\n    BarSeries.prototype.getKeys = function (direction) {\n        var _this = this;\n        var directionKeys = this.directionKeys;\n        var keys = directionKeys && directionKeys[this.flipXY ? flipChartAxisDirection(direction) : direction];\n        var values = [];\n        if (keys) {\n            keys.forEach(function (key) {\n                var value = _this[key];\n                if (value) {\n                    if (Array.isArray(value)) {\n                        values = values.concat(flat(value));\n                    }\n                    else {\n                        values.push(value);\n                    }\n                }\n            });\n        }\n        return values;\n    };\n    Object.defineProperty(BarSeries.prototype, \"xKey\", {\n        get: function () {\n            return this._xKey;\n        },\n        set: function (value) {\n            if (this._xKey !== value) {\n                this._xKey = value;\n                this.xData = [];\n                this.scheduleData();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BarSeries.prototype, \"xName\", {\n        get: function () {\n            return this._xName;\n        },\n        set: function (value) {\n            if (this._xName !== value) {\n                this._xName = value;\n                this.update();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BarSeries.prototype, \"yKeys\", {\n        get: function () {\n            return this._yKeys;\n        },\n        set: function (yKeys) {\n            var _this = this;\n            var flatYKeys = undefined;\n            // Convert from flat y-keys to grouped y-keys.\n            if (yKeys.length && !Array.isArray(yKeys[0])) {\n                flatYKeys = yKeys;\n                if (this.grouped) {\n                    yKeys = flatYKeys.map(function (k) { return [k]; });\n                }\n                else {\n                    yKeys = [flatYKeys];\n                }\n            }\n            if (!equal(this._yKeys, yKeys)) {\n                if (flatYKeys) {\n                    this.flatYKeys = flatYKeys;\n                }\n                else {\n                    this.flatYKeys = undefined;\n                }\n                this._yKeys = yKeys;\n                var prevYKeyCount_1 = 0;\n                this.cumYKeyCount = [];\n                var visibleStacks_1 = [];\n                yKeys.forEach(function (stack, index) {\n                    if (stack.length > 0) {\n                        visibleStacks_1.push(String(index));\n                    }\n                    _this.cumYKeyCount.push(prevYKeyCount_1);\n                    prevYKeyCount_1 += stack.length;\n                });\n                this.yData = [];\n                var seriesItemEnabled_1 = this.seriesItemEnabled;\n                seriesItemEnabled_1.clear();\n                yKeys.forEach(function (stack) {\n                    stack.forEach(function (yKey) { return seriesItemEnabled_1.set(yKey, true); });\n                });\n                var groupScale = this.groupScale;\n                groupScale.domain = visibleStacks_1;\n                groupScale.padding = 0.1;\n                groupScale.round = true;\n                this.scheduleData();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BarSeries.prototype, \"grouped\", {\n        get: function () {\n            return this._grouped;\n        },\n        set: function (value) {\n            if (this._grouped !== value) {\n                this._grouped = value;\n                if (this.flatYKeys) {\n                    this.yKeys = this.flatYKeys;\n                }\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BarSeries.prototype, \"yNames\", {\n        get: function () {\n            return this._yNames;\n        },\n        set: function (values) {\n            if (Array.isArray(values) && this.flatYKeys) {\n                var map_1 = {};\n                this.flatYKeys.forEach(function (k, i) {\n                    map_1[k] = values[i];\n                });\n                values = map_1;\n            }\n            this._yNames = values;\n            this.scheduleData();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BarSeries.prototype.setColors = function (fills, strokes) {\n        this.fills = fills;\n        this.strokes = strokes;\n    };\n    Object.defineProperty(BarSeries.prototype, \"normalizedTo\", {\n        get: function () {\n            return this._normalizedTo;\n        },\n        set: function (value) {\n            var absValue = value ? Math.abs(value) : undefined;\n            if (this._normalizedTo !== absValue) {\n                this._normalizedTo = absValue;\n                this.scheduleData();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BarSeries.prototype, \"strokeWidth\", {\n        get: function () {\n            return this._strokeWidth;\n        },\n        set: function (value) {\n            if (this._strokeWidth !== value) {\n                this._strokeWidth = value;\n                this.update();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BarSeries.prototype, \"shadow\", {\n        get: function () {\n            return this._shadow;\n        },\n        set: function (value) {\n            if (this._shadow !== value) {\n                this._shadow = value;\n                this.update();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BarSeries.prototype.onHighlightChange = function () {\n        this.updateRectNodes();\n    };\n    BarSeries.prototype.processData = function () {\n        var _a = this, xKey = _a.xKey, yKeys = _a.yKeys, seriesItemEnabled = _a.seriesItemEnabled;\n        var data = xKey && yKeys.length && this.data ? this.data : [];\n        var keysFound = true; // only warn once\n        this.xData = data.map(function (datum) {\n            if (keysFound && !(xKey in datum)) {\n                keysFound = false;\n                console.warn(\"The key '\" + xKey + \"' was not found in the data: \", datum);\n            }\n            return datum[xKey];\n        });\n        this.yData = data.map(function (datum) { return yKeys.map(function (stack) {\n            return stack.map(function (yKey) {\n                if (keysFound && !(yKey in datum)) {\n                    keysFound = false;\n                    console.warn(\"The key '\" + yKey + \"' was not found in the data: \", datum);\n                }\n                var value = datum[yKey];\n                return isFinite(value) && seriesItemEnabled.get(yKey) ? value : 0;\n            });\n        }); });\n        // Used for normalization of stacked bars. Contains min/max values for each stack in each group,\n        // where min is zero and max is a positive total of all values in the stack\n        // or min is a negative total of all values in the stack and max is zero.\n        var yMinMax = this.yData.map(function (group) { return group.map(function (stack) { return findMinMax(stack); }); });\n        var _b = this, yData = _b.yData, normalizedTo = _b.normalizedTo;\n        var yLargestMinMax = this.findLargestMinMax(yMinMax);\n        var yMin;\n        var yMax;\n        if (normalizedTo && isFinite(normalizedTo)) {\n            yMin = yLargestMinMax.min < 0 ? -normalizedTo : 0;\n            yMax = normalizedTo;\n            yData.forEach(function (group, i) {\n                group.forEach(function (stack, j) {\n                    stack.forEach(function (y, k) {\n                        if (y < 0) {\n                            stack[k] = -y / yMinMax[i][j].min * normalizedTo;\n                        }\n                        else {\n                            stack[k] = y / yMinMax[i][j].max * normalizedTo;\n                        }\n                    });\n                });\n            });\n        }\n        else {\n            yMin = yLargestMinMax.min;\n            yMax = yLargestMinMax.max;\n        }\n        this.yDomain = this.fixNumericExtent([yMin, yMax], 'y');\n        this.fireEvent({ type: 'dataProcessed' });\n        return true;\n    };\n    BarSeries.prototype.findLargestMinMax = function (groups) {\n        var tallestStackMin = 0;\n        var tallestStackMax = 0;\n        for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {\n            var group = groups_1[_i];\n            for (var _a = 0, group_1 = group; _a < group_1.length; _a++) {\n                var stack = group_1[_a];\n                if (stack.min < tallestStackMin) {\n                    tallestStackMin = stack.min;\n                }\n                if (stack.max > tallestStackMax) {\n                    tallestStackMax = stack.max;\n                }\n            }\n        }\n        return { min: tallestStackMin, max: tallestStackMax };\n    };\n    BarSeries.prototype.getDomain = function (direction) {\n        if (this.flipXY) {\n            direction = flipChartAxisDirection(direction);\n        }\n        if (direction === ChartAxisDirection.X) {\n            return this.xData;\n        }\n        else {\n            return this.yDomain;\n        }\n    };\n    BarSeries.prototype.fireNodeClickEvent = function (event, datum) {\n        this.fireEvent({\n            type: 'nodeClick',\n            event: event,\n            series: this,\n            datum: datum.seriesDatum,\n            xKey: this.xKey,\n            yKey: datum.yKey\n        });\n    };\n    BarSeries.prototype.getCategoryAxis = function () {\n        return this.flipXY ? this.yAxis : this.xAxis;\n    };\n    BarSeries.prototype.getValueAxis = function () {\n        return this.flipXY ? this.xAxis : this.yAxis;\n    };\n    BarSeries.prototype.highlight = function (itemId) {\n        _super.prototype.highlight.call(this, itemId);\n        this.highlightedItemId = itemId;\n        this.updateRectNodes();\n    };\n    BarSeries.prototype.dehighlight = function () {\n        this.highlightedItemId = undefined;\n        this.updateRectNodes();\n    };\n    BarSeries.prototype.undim = function (itemId) {\n        this.updateDim(itemId);\n    };\n    BarSeries.prototype.dim = function () {\n        this.updateDim();\n    };\n    BarSeries.prototype.updateDim = function (itemId) {\n        var dimOpacity = this.highlightStyle.series.dimOpacity;\n        var fn = function (node, datum) { return node.opacity = !itemId || itemId === datum.itemId ? 1 : dimOpacity; };\n        this.rectSelection.each(fn);\n        this.labelSelection.each(fn);\n    };\n    BarSeries.prototype.generateNodeData = function () {\n        var _this = this;\n        if (!this.data) {\n            return [];\n        }\n        var flipXY = this.flipXY;\n        var xAxis = this.getCategoryAxis();\n        var yAxis = this.getValueAxis();\n        var xScale = xAxis.scale;\n        var yScale = yAxis.scale;\n        var _a = this, groupScale = _a.groupScale, yKeys = _a.yKeys, cumYKeyCount = _a.cumYKeyCount, fills = _a.fills, strokes = _a.strokes, strokeWidth = _a.strokeWidth, seriesItemEnabled = _a.seriesItemEnabled, data = _a.data, xData = _a.xData, yData = _a.yData, label = _a.label;\n        var labelFontStyle = label.fontStyle;\n        var labelFontWeight = label.fontWeight;\n        var labelFontSize = label.fontSize;\n        var labelFontFamily = label.fontFamily;\n        var labelColor = label.color;\n        var labelFormatter = label.formatter;\n        var labelPlacement = label.placement;\n        groupScale.range = [0, xScale.bandwidth];\n        var grouped = true;\n        var barWidth = grouped ? groupScale.bandwidth : xScale.bandwidth;\n        var nodeData = [];\n        xData.forEach(function (group, groupIndex) {\n            var seriesDatum = data[groupIndex];\n            var x = xScale.convert(group);\n            var groupYs = yData[groupIndex]; // y-data for groups of stacks\n            for (var stackIndex = 0; stackIndex < groupYs.length; stackIndex++) {\n                var stackYs = groupYs[stackIndex]; // y-data for a stack withing a group\n                var prevMinY = 0;\n                var prevMaxY = 0;\n                for (var levelIndex = 0; levelIndex < stackYs.length; levelIndex++) {\n                    var currY = stackYs[levelIndex];\n                    var yKey = yKeys[stackIndex][levelIndex];\n                    var barX = grouped ? x + groupScale.convert(String(stackIndex)) : x;\n                    // Bars outside of visible range are not rendered, so we generate node data\n                    // only for the visible subset of user data.\n                    if (!xAxis.inRange(barX, barWidth)) {\n                        continue;\n                    }\n                    var prevY = currY < 0 ? prevMinY : prevMaxY;\n                    var y = yScale.convert(prevY + currY);\n                    var bottomY = yScale.convert(prevY);\n                    var yValue = seriesDatum[yKey]; // unprocessed y-value\n                    var yValueIsNumber = typeof yValue === 'number';\n                    var labelText = void 0;\n                    if (labelFormatter) {\n                        labelText = labelFormatter({ value: yValueIsNumber ? yValue : undefined });\n                    }\n                    else {\n                        labelText = yValueIsNumber && isFinite(yValue) ? yValue.toFixed(2) : '';\n                    }\n                    var labelX = void 0;\n                    var labelY = void 0;\n                    if (flipXY) {\n                        labelY = barX + barWidth / 2;\n                        if (labelPlacement === BarLabelPlacement.Inside) {\n                            labelX = y + (yValue >= 0 ? -1 : 1) * Math.abs(bottomY - y) / 2;\n                        }\n                        else {\n                            labelX = y + (yValue >= 0 ? 1 : -1) * 4;\n                        }\n                    }\n                    else {\n                        labelX = barX + barWidth / 2;\n                        if (labelPlacement === BarLabelPlacement.Inside) {\n                            labelY = y + (yValue >= 0 ? 1 : -1) * Math.abs(bottomY - y) / 2;\n                        }\n                        else {\n                            labelY = y + (yValue >= 0 ? -3 : 4);\n                        }\n                    }\n                    var labelTextAlign = void 0;\n                    var labelTextBaseline = void 0;\n                    if (labelPlacement === BarLabelPlacement.Inside) {\n                        labelTextAlign = 'center';\n                        labelTextBaseline = 'middle';\n                    }\n                    else {\n                        labelTextAlign = flipXY ? (yValue >= 0 ? 'start' : 'end') : 'center';\n                        labelTextBaseline = flipXY ? 'middle' : (yValue >= 0 ? 'bottom' : 'top');\n                    }\n                    var colorIndex = cumYKeyCount[stackIndex] + levelIndex;\n                    nodeData.push({\n                        index: groupIndex,\n                        series: _this,\n                        itemId: yKey,\n                        seriesDatum: seriesDatum,\n                        yValue: yValue,\n                        yKey: yKey,\n                        x: flipXY ? Math.min(y, bottomY) : barX,\n                        y: flipXY ? barX : Math.min(y, bottomY),\n                        width: flipXY ? Math.abs(bottomY - y) : barWidth,\n                        height: flipXY ? barWidth : Math.abs(bottomY - y),\n                        fill: fills[colorIndex % fills.length],\n                        stroke: strokes[colorIndex % strokes.length],\n                        strokeWidth: strokeWidth,\n                        label: seriesItemEnabled.get(yKey) && labelText ? {\n                            text: labelText,\n                            fontStyle: labelFontStyle,\n                            fontWeight: labelFontWeight,\n                            fontSize: labelFontSize,\n                            fontFamily: labelFontFamily,\n                            textAlign: labelTextAlign,\n                            textBaseline: labelTextBaseline,\n                            fill: labelColor,\n                            x: labelX,\n                            y: labelY\n                        } : undefined\n                    });\n                    if (currY < 0) {\n                        prevMinY += currY;\n                    }\n                    else {\n                        prevMaxY += currY;\n                    }\n                }\n            }\n        });\n        return nodeData;\n    };\n    BarSeries.prototype.update = function () {\n        var _a = this, visible = _a.visible, chart = _a.chart, xAxis = _a.xAxis, yAxis = _a.yAxis, xData = _a.xData, yData = _a.yData;\n        this.group.visible = visible;\n        if (!chart || chart.layoutPending || chart.dataPending ||\n            !xAxis || !yAxis || !visible || !xData.length || !yData.length) {\n            return;\n        }\n        var nodeData = this.generateNodeData();\n        this.updateRectSelection(nodeData);\n        this.updateRectNodes();\n        this.updateLabelSelection(nodeData);\n        this.updateLabelNodes();\n    };\n    BarSeries.prototype.updateRectSelection = function (selectionData) {\n        var updateRects = this.rectSelection.setData(selectionData);\n        updateRects.exit.remove();\n        var enterRects = updateRects.enter.append(Rect).each(function (rect) {\n            rect.tag = BarSeriesNodeTag.Bar;\n            rect.crisp = true;\n        });\n        this.rectSelection = updateRects.merge(enterRects);\n    };\n    BarSeries.prototype.updateRectNodes = function () {\n        var _this = this;\n        if (!this.chart) {\n            return;\n        }\n        var _a = this, fillOpacity = _a.fillOpacity, strokeOpacity = _a.strokeOpacity, shadow = _a.shadow, formatter = _a.formatter, xKey = _a.xKey, flipXY = _a.flipXY, highlightedDatum = _a.chart.highlightedDatum, highlightedItemId = _a.highlightedItemId, _b = _a.highlightStyle, fill = _b.fill, stroke = _b.stroke, highlightedDatumStrokeWidth = _b.strokeWidth, _c = _b.series, subSeriesHighlightingEnabled = _c.enabled, highlightedSubSeriesStrokeWidth = _c.strokeWidth;\n        this.rectSelection.each(function (rect, datum) {\n            var isDatumHighlighted = datum === highlightedDatum;\n            var isSubSeriesHighlighted = highlightedItemId === datum.itemId;\n            var rectFill = isDatumHighlighted && fill !== undefined ? fill : datum.fill;\n            var rectStroke = isDatumHighlighted && stroke !== undefined ? stroke : datum.stroke;\n            var format = undefined;\n            var strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== undefined\n                ? highlightedDatumStrokeWidth\n                : subSeriesHighlightingEnabled && isSubSeriesHighlighted && highlightedSubSeriesStrokeWidth !== undefined\n                    ? highlightedSubSeriesStrokeWidth\n                    : datum.strokeWidth;\n            if (formatter) {\n                format = formatter({\n                    datum: datum.seriesDatum,\n                    fill: rectFill,\n                    stroke: rectStroke,\n                    strokeWidth: strokeWidth,\n                    highlighted: isDatumHighlighted,\n                    xKey: xKey,\n                    yKey: datum.yKey\n                });\n            }\n            rect.x = datum.x;\n            rect.y = datum.y;\n            rect.width = datum.width;\n            rect.height = datum.height;\n            rect.fill = format && format.fill || rectFill;\n            rect.stroke = format && format.stroke || rectStroke;\n            rect.strokeWidth = format && format.strokeWidth !== undefined ? format.strokeWidth : strokeWidth;\n            rect.fillOpacity = fillOpacity;\n            rect.strokeOpacity = strokeOpacity;\n            rect.lineDash = _this.lineDash;\n            rect.lineDashOffset = _this.lineDashOffset;\n            rect.fillShadow = shadow;\n            // Prevent stroke from rendering for zero height columns and zero width bars.\n            rect.visible = flipXY ? datum.width > 0 : datum.height > 0;\n        });\n    };\n    BarSeries.prototype.updateLabelSelection = function (selectionData) {\n        var updateLabels = this.labelSelection.setData(selectionData);\n        updateLabels.exit.remove();\n        var enterLabels = updateLabels.enter.append(Text).each(function (text) {\n            text.tag = BarSeriesNodeTag.Label;\n            text.pointerEvents = PointerEvents.None;\n        });\n        this.labelSelection = updateLabels.merge(enterLabels);\n    };\n    BarSeries.prototype.updateLabelNodes = function () {\n        var labelEnabled = this.label.enabled;\n        this.labelSelection.each(function (text, datum) {\n            var label = datum.label;\n            if (label && labelEnabled) {\n                text.fontStyle = label.fontStyle;\n                text.fontWeight = label.fontWeight;\n                text.fontSize = label.fontSize;\n                text.fontFamily = label.fontFamily;\n                text.textAlign = label.textAlign;\n                text.textBaseline = label.textBaseline;\n                text.text = label.text;\n                text.x = label.x;\n                text.y = label.y;\n                text.fill = label.fill;\n                text.visible = true;\n            }\n            else {\n                text.visible = false;\n            }\n        });\n    };\n    BarSeries.prototype.getTooltipHtml = function (nodeDatum) {\n        var _a = this, xKey = _a.xKey, yKeys = _a.yKeys, yData = _a.yData;\n        var xAxis = this.getCategoryAxis();\n        var yAxis = this.getValueAxis();\n        var yKey = nodeDatum.yKey;\n        if (!xKey || !yKey || !yData.length) {\n            return '';\n        }\n        var yGroup = yData[nodeDatum.index];\n        var fillIndex = 0;\n        var i = 0;\n        var j = 0;\n        for (; j < yKeys.length; j++) {\n            var stack = yKeys[j];\n            i = stack.indexOf(yKey);\n            if (i >= 0) {\n                fillIndex += i;\n                break;\n            }\n            fillIndex += stack.length;\n        }\n        var _b = this, xName = _b.xName, yNames = _b.yNames, fills = _b.fills, tooltip = _b.tooltip;\n        var tooltipRenderer = tooltip.renderer;\n        var datum = nodeDatum.seriesDatum;\n        var yName = yNames[yKey];\n        var color = fills[fillIndex % fills.length];\n        var xValue = datum[xKey];\n        var yValue = datum[yKey];\n        var processedYValue = yGroup[j][i];\n        var xString = sanitizeHtml(xAxis.formatDatum(xValue));\n        var yString = sanitizeHtml(yAxis.formatDatum(yValue));\n        var title = sanitizeHtml(yName);\n        var content = xString + ': ' + yString;\n        var defaults = {\n            title: title,\n            backgroundColor: color,\n            content: content\n        };\n        if (tooltipRenderer) {\n            return toTooltipHtml(tooltipRenderer({\n                datum: datum,\n                xKey: xKey,\n                xValue: xValue,\n                xName: xName,\n                yKey: yKey,\n                yValue: yValue,\n                processedYValue: processedYValue,\n                yName: yName,\n                color: color\n            }), defaults);\n        }\n        return toTooltipHtml(defaults);\n    };\n    BarSeries.prototype.listSeriesItems = function (legendData) {\n        var _a = this, id = _a.id, data = _a.data, xKey = _a.xKey, yKeys = _a.yKeys, yNames = _a.yNames, cumYKeyCount = _a.cumYKeyCount, seriesItemEnabled = _a.seriesItemEnabled, hideInLegend = _a.hideInLegend, fills = _a.fills, strokes = _a.strokes, fillOpacity = _a.fillOpacity, strokeOpacity = _a.strokeOpacity;\n        if (data && data.length && xKey && yKeys.length) {\n            this.yKeys.forEach(function (stack, stackIndex) {\n                stack.forEach(function (yKey, levelIndex) {\n                    if (hideInLegend.indexOf(yKey) < 0) {\n                        var colorIndex = cumYKeyCount[stackIndex] + levelIndex;\n                        legendData.push({\n                            id: id,\n                            itemId: yKey,\n                            enabled: seriesItemEnabled.get(yKey) || false,\n                            label: {\n                                text: yNames[yKey] || yKey\n                            },\n                            marker: {\n                                fill: fills[colorIndex % fills.length],\n                                stroke: strokes[colorIndex % strokes.length],\n                                fillOpacity: fillOpacity,\n                                strokeOpacity: strokeOpacity\n                            }\n                        });\n                    }\n                });\n            });\n        }\n    };\n    BarSeries.prototype.toggleSeriesItem = function (itemId, enabled) {\n        var seriesItemEnabled = this.seriesItemEnabled;\n        seriesItemEnabled.set(itemId, enabled);\n        var yKeys = this.yKeys.map(function (stack) { return stack.slice(); }); // deep clone\n        seriesItemEnabled.forEach(function (enabled, yKey) {\n            if (!enabled) {\n                yKeys.forEach(function (stack) {\n                    var index = stack.indexOf(yKey);\n                    if (index >= 0) {\n                        stack.splice(index, 1);\n                    }\n                });\n            }\n        });\n        var visibleStacks = [];\n        yKeys.forEach(function (stack, index) {\n            if (stack.length > 0) {\n                visibleStacks.push(String(index));\n            }\n        });\n        this.groupScale.domain = visibleStacks;\n        this.scheduleData();\n    };\n    BarSeries.className = 'BarSeries';\n    BarSeries.type = 'bar';\n    __decorate([\n        reactive('dataChange')\n    ], BarSeries.prototype, \"flipXY\", void 0);\n    __decorate([\n        reactive('dataChange')\n    ], BarSeries.prototype, \"fills\", void 0);\n    __decorate([\n        reactive('dataChange')\n    ], BarSeries.prototype, \"strokes\", void 0);\n    __decorate([\n        reactive('layoutChange')\n    ], BarSeries.prototype, \"fillOpacity\", void 0);\n    __decorate([\n        reactive('layoutChange')\n    ], BarSeries.prototype, \"strokeOpacity\", void 0);\n    __decorate([\n        reactive('update')\n    ], BarSeries.prototype, \"lineDash\", void 0);\n    __decorate([\n        reactive('update')\n    ], BarSeries.prototype, \"lineDashOffset\", void 0);\n    __decorate([\n        reactive('update')\n    ], BarSeries.prototype, \"formatter\", void 0);\n    __decorate([\n        reactive('layoutChange')\n    ], BarSeries.prototype, \"hideInLegend\", void 0);\n    return BarSeries;\n}(CartesianSeries));\nexport { BarSeries };\n"]},"metadata":{},"sourceType":"module"}