{"version":3,"sources":["App.js","index.js"],"names":["App","useState","searchTerm","setSearchTerm","books","setBooks","loading","setLoading","error","setError","clickList","setClickList","formatSearchTerm","split","join","API_URL","style","textAlign","JSON","stringify","year","obj","i","publishYear","publish_year","p","push","sorted","slice","sort","a","b","smallest","yearSpan","length","options","autoSize","title","enabled","text","color","fontWeight","fontSize","data","series","type","xKey","xName","binCount","tooltip","label","fill","stroke","highlightStyle","listeners","nodeClick","event","clickBook","datum","book","legend","navigator","axes","position","tick","width","size","count","className","onSubmit","search","preventDefault","fetch","then","response","json","docs","catch","placeholder","value","onChange","e","target","map","index","alt","src","cover_edition_key","author_name","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.259de1e6.chunk.js","sourcesContent":["// quaternion algebra\n// useState will be used to handle to slow search by returning a pair representing the current state and then a function to update the state respectively\nimport React, {useState} from 'react';\nimport './App.css';\nimport { AgChartsReact} from 'ag-charts-react';\n\n\nconst App = () => {\n  //store data from search terms using useState where searchTerm is set to empty string. The setSearchTerm is updated with the input\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  //store data from API where books is set to an empty arry and setBooks method is used to update the value of books with the returned data\n  const [books, setBooks] = useState([]);\n  //how to handle slow search reaspone while waiting for data\n  const [loading, setLoading]= useState(false);\n  const [error, setError] = useState(null);\n  const [clickList, setClickList] = useState([]);\n\n  //format input to replace spaces with '+'\n  const formatSearchTerm = searchTerm.split(' ').join('+');\n  \n\n  const onInputChange= (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  let API_URL = `https://openlibrary.org/search.json?q=${formatSearchTerm}`;\n  \n  const fetchBooks = () => {\n      setLoading(true);\n      fetch(`${API_URL}`)\n      .then((response) => response.json())\n      // Books result\n      .then((data) => setBooks(data.docs))\n      .then(() => setLoading())\n      .catch(setError);\n  };\n\n  if (loading) {\n    return <h1 style={{textAlign: \"center\" }}>Searching Library...</h1>;\n  }\n  if (error) {\n    return <pre>{JSON.stringify(error, null, 2)}</pre>;\n  }\n  if (!books) {\n    return null;\n  }\n\n  \n  // Submit handler\n  const onSubmitHandler = (search) => {\n    // Prevent browser refreshing after form submission\n    search.preventDefault();\n    // Call fetch books async function\n    fetchBooks();\n  };\n\n  let year = [];\n  function publishYear(obj){ \n    for (let i in obj){\n      let publishYear = obj[i].publish_year;\n      // console.log(publishYear);\n      for(let p in publishYear){\n        year.push(publishYear[p]);\n      }\n    }\n\n  };\n\npublishYear(books);\n\n\n// let frequency= {}; \n// for(var i=0; i<year.length; ++i){\n//   if(!frequency[year[i]])\n//   frequency[year[i]] = 0;\n//   ++frequency[year[i]];\n// };\n\n// console.log(year);\n\nvar sorted = year.slice().sort(function(a, b) {\n  return a - b;\n});\n\nvar smallest = sorted[0],                                 \n    largest  = sorted[sorted.length - 1],\n    yearSpan = largest-smallest;\n\nfunction nodeClick (event) {\n  let clickBook = [];\n  var data = event.datum.data;\n  for (var book in data){\n    clickBook.push(data[book])\n  } \n  setClickList(clickBook);\n}\n  const options = {\n    autoSize: true,\n    title: {\n      enabled: true,\n      text: `Results for \"${searchTerm}\"`,\n      color: 'black', \n      fontWeight: 'bold',\n      fontSize: 20,\n    },\n    data: books,\n    series: [\n      {\n        type: 'histogram',\n        xKey: 'first_publish_year',\n        xName: 'Publicaiton Year',\n        binCount: yearSpan,\n        tooltip:{\n          enabled: false,\n        },\n        label: {\n          color: '#247',\n          fontSize:9,\n          fontWeight: 'bold',\n  \n        },\n        fill: '#247', \n        stroke: '#fff',\n        highlightStyle: {\n          fill: 'rgba(0, 116, 255, 0.74)'\n        },\n        listeners: {\n          nodeClick: nodeClick,\n        },\n      },\n    ],\n    legend: {\n      enabled: false\n    },\n    navigator: {\n      enabled: true,\n    },\n    axes: [\n      {\n        type: 'number',\n        position: 'bottom',\n        title: {\n          enabled: true,\n          text: 'Year of Publication'\n        },\n      },\n      {\n        type: 'number',\n        position: 'left',\n        title: {\n          enabled: true,\n          text: 'Number of Book Results'\n        },\n        tick: {\n          width: 1,\n          size: 6,\n          count: 5\n        },\n      },\n    ],\n  };\n\n  return (\n    <div className=\"body\">\n      <h2 className=\"title\">Search Open Library</h2>\n      <form className=\"Search\" onSubmit={onSubmitHandler}>\n            <input\n            className=\"input-field\"\n            type=\"search\"\n            placeholder=\"Enter Term to Search by\"\n            value={searchTerm}\n            onChange={onInputChange}\n            />\n            <button className=\"button\" type=\"submit\">Find</button>\n        </form>\n      <AgChartsReact options={options} className='chart' />\n      <div className = 'container'>\n        <ul >\n          {\n            clickList.map((book, index) => {\n              return (\n                <li key={index}>\n                  <div className = 'list'>\n                    <img alt={`${book.title} book`} src={`http:////covers.openlibrary.org/b/olid/${book.cover_edition_key}-M.jpg`} />\n                    <div className = 'list-item'>\n                      \n                      <h3>{book.title}</h3>\n                      <p>{`Author: ${book.author_name}`}</p>\n                      <p>{`Year first published: ${book.publish_year}`}</p>\n                    </div>\n                  </div>\n                  <hr />\n                </li>\n              );\n            })\n          }\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);"],"sourceRoot":""}